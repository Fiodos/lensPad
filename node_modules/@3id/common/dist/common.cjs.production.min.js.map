{"version":3,"file":"common.cjs.production.min.js","sources":["../src/errors.ts","../src/utils.ts"],"sourcesContent":["import { assertAs, createNamespaceError } from 'errors-utils'\n\nexport class ThreeIDError extends createNamespaceError('3ID') {}\n\nexport function assert(condition: boolean, code: number, message: string): asserts condition {\n  return assertAs(condition, ThreeIDError, code, message)\n}\n\nassert.isDefined = function <T = unknown>(\n  value: T,\n  message: string\n): asserts value is NonNullable<T> {\n  return assert(value != null, 2, message)\n}\n\nassert.isString = function (\n  value: unknown,\n  message = 'Input must be a string'\n): asserts value is string {\n  return assert(typeof value === 'string', 3, message)\n}\n","import { fromString, toString } from 'uint8arrays'\n\nexport function fromHex(hex: string): Uint8Array {\n  return fromString(hex, 'base16')\n}\n\nexport function toHex(bytes: Uint8Array): string {\n  return toString(bytes, 'base16')\n}\n"],"names":["ThreeIDError","createNamespaceError","assert","condition","code","message","assertAs","isDefined","value","isString","hex","fromString","bytes","toString"],"mappings":"2NAEaA,kKAAqBC,uBAAqB,iBAEvCC,EAAOC,EAAoBC,EAAcC,UAChDC,WAASH,EAAWH,EAAcI,EAAMC,GAGjDH,EAAOK,UAAY,SACjBC,EACAH,UAEOH,EAAgB,MAATM,EAAe,EAAGH,IAGlCH,EAAOO,SAAW,SAChBD,EACAH,mBAAAA,IAAAA,EAAU,0BAEHH,EAAwB,iBAAVM,EAAoB,EAAGH,qECjBtBK,UACfC,aAAWD,EAAK,kCAGHE,UACbC,WAASD,EAAO"}