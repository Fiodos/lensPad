import type { ServerPayload } from '@ceramicnetwork/rpc-window';
import type { RPCClient, RPCMethodTypes } from 'rpc-utils';
import type { Observable } from 'rxjs';
declare type DisplayConnectMethods = {
    hide: RPCMethodTypes;
    display: {
        params: {
            mobile?: boolean;
            height?: string;
            width?: string;
        };
    };
};
export declare class DisplayConnectClientRPC {
    client: RPCClient<DisplayConnectMethods>;
    constructor(target?: Window);
    hide(): Promise<void>;
    display(mobile?: boolean, height?: string, width?: string): Promise<void>;
}
export declare type ConnectPayload = ServerPayload<DisplayConnectMethods, '3id-connect-iframedisplay'>;
export declare function createDisplayConnectServerRPC(iframe: HTMLIFrameElement): Observable<ConnectPayload>;
export declare const createConnectIframe: (iframeUrl: string) => HTMLIFrameElement;
declare type DisplayManageMethods = {
    display: {
        params: {
            accountId: string;
        };
    };
};
export declare class DisplayManageClientRPC {
    client: RPCClient<DisplayManageMethods>;
    constructor(target?: Window);
    display(accountId: string): Promise<void>;
}
export declare type ManagePayload = ServerPayload<DisplayManageMethods, '3id-connect-managedisplay'>;
export declare function createDisplayManageServerRPC(manageAppUrl: string): Observable<ManagePayload>;
export declare const createManageIframe: (iframeUrl: string) => HTMLIFrameElement;
export {};
