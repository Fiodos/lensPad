import type { DIDMethodName, DIDRequest, DIDResponse, DIDProvider, DIDProviderMethods } from 'dids';
import type { SendRequestFunc } from 'rpc-utils';
declare type DIDProviderWithOrigin = DIDProvider & {
    send: SendRequestFunc<DIDProviderMethods, [string | null | undefined]>;
};
/**
 *  A DID provider proxy, DID provider interface that acts as rpc client, to
 *  relay request to iframe (rpc server)
 */
export declare class DidProviderProxy implements DIDProviderWithOrigin {
    accountId: string;
    provider: DIDProviderWithOrigin;
    constructor(provider: DIDProviderWithOrigin, accountId: string);
    get isDidProvider(): boolean;
    send<Name extends DIDMethodName>(msg: DIDRequest<Name>, origin?: string | null): Promise<DIDResponse<Name> | null>;
}
export {};
