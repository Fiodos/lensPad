import type { AuthProvider } from '@ceramicnetwork/blockchain-utils-linking';
import type { DIDProvider } from 'dids';
import { RPCClient } from 'rpc-utils';
import type { Subscription } from 'rxjs';
import { DidProviderProxy } from './didProviderProxy';
export declare type NetworkConfig = {
    connect_iframe: string;
    manage_iframe: string;
};
export declare type NetworkList = Record<string, NetworkConfig>;
declare type PostMessage = (message: any, targetOrigin: string, transfer?: Array<Transferable> | undefined) => void;
/**
 *  ThreeIdConnect provides interface for loading and instantiating IDW iframe,
 *  and provides a 3ID provider interface to send requests to iframe. Acts like
 *  rpc client.
 */
export declare class ThreeIdConnect {
    iframe: HTMLIFrameElement;
    iframeLoadedPromise: Promise<void>;
    postMessage: PostMessage | undefined;
    RPCProvider: DIDProvider | undefined;
    RPCClient: RPCClient<any> | undefined;
    authProvider: AuthProvider | undefined;
    accountId: string | undefined;
    manageUrl: string;
    _authProviderSubscription: Subscription | null;
    _connected: boolean;
    /**
     *  Creates ThreeIdConnect. Create and loads iframe. Should be instantiated
     *  on page load.
     *
     * @param     {String}    network     network name, or iframe url, testnet-clay, dev-unstable, local and mainnet are supported
     * @param     {String}    iframeUrl   manage iframe url
     */
    constructor(network?: string, manageUrl?: string);
    connect(provider: AuthProvider): Promise<void>;
    setAuthProvider(authProvider: AuthProvider): Promise<void>;
    get connected(): boolean;
    /**
     *  Returns a DID provider, which can send and receive messages from iframe
     *
     * @return    {DidProviderProxy}     A DID provider
     */
    getDidProvider(): DidProviderProxy;
}
export {};
