import type { AuthProvider, LinkProof } from '@ceramicnetwork/blockchain-utils-linking';
import type { ServerPayload } from '@ceramicnetwork/rpc-window';
import { AccountID } from 'caip';
import type { RPCClient } from 'rpc-utils';
import type { Observable } from 'rxjs';
export declare type AuthProviderMethods = {
    accountId: {
        result: string;
    };
    authenticate: {
        params: {
            message: string;
        };
        result: string;
    };
    createLink: {
        params: {
            did: string;
        };
        result: LinkProof;
    };
};
export declare class AuthProviderClient<NS extends string> implements AuthProvider {
    client: RPCClient<AuthProviderMethods>;
    readonly isAuthProvider = true;
    constructor(target?: Window, namespace?: string);
    accountId(): Promise<AccountID>;
    authenticate(message: string): Promise<string>;
    createLink(did: string): Promise<LinkProof>;
    withAddress(): AuthProvider;
}
export declare function createAuthProviderServer<NS extends string>(authProvider: AuthProvider, namespace?: string): Observable<ServerPayload<AuthProviderMethods, NS>>;
