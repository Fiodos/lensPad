import { AuthProvider } from './auth-provider';
import { AccountID } from 'caip';
import { LinkProof } from './util';
import { Ocap, OcapParams } from './ocap-util';
declare type EthProviderOpts = {
    eoaSignAccount?: string;
};
export declare class EthereumAuthProvider implements AuthProvider {
    private readonly provider;
    private readonly address;
    private readonly opts;
    readonly isAuthProvider = true;
    constructor(provider: any, address: string, opts?: EthProviderOpts);
    accountId(): Promise<AccountID>;
    authenticate(message: string): Promise<string>;
    createLink(did: string): Promise<LinkProof>;
    requestCapability(params: OcapParams): Promise<Ocap>;
    withAddress(address: string): AuthProvider;
}
export declare function isEthAddress(address: string): boolean;
export declare function isERC1271(account: AccountID, provider: any): Promise<boolean>;
export declare function normalizeAccountId(account: AccountID): AccountID;
export declare function createLink(did: string, account: AccountID, provider: any, opts: any): Promise<LinkProof>;
export declare function authenticate(message: string, account: AccountID, provider: any): Promise<string>;
export {};
//# sourceMappingURL=ethereum.d.ts.map