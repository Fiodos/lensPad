"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NearAuthProvider = void 0;
const caip_1 = require("caip");
const util_1 = require("./util");
const uint8arrays = __importStar(require("uint8arrays"));
const nearApiJs = __importStar(require("near-api-js"));
const sha256 = __importStar(require("@stablelib/sha256"));
const getSignature = async (signer, accountId, message, networkId) => {
    const signed = await signer.signMessage(message, accountId, networkId);
    return uint8arrays.toString(signed.signature, 'base64');
};
class NearAuthProvider {
    constructor(near, accountName, chainRef) {
        this.near = near;
        this.accountName = accountName;
        this.chainRef = chainRef;
        this.isAuthProvider = true;
    }
    async authenticate(message) {
        const key = await this.near.connection.signer.keyStore.getKey(this.chainRef, this.accountName);
        const signer = await nearApiJs.InMemorySigner.fromKeyPair(this.chainRef, this.accountName, key);
        const digest = sha256.hash(uint8arrays.fromString(message));
        const { signature } = await signer.signMessage(digest, this.accountName, this.chainRef);
        return uint8arrays.toString(signature, 'base16');
    }
    async createLink(did) {
        const key = await this.near.connection.signer.keyStore.getKey(this.chainRef, this.accountName);
        const signer = await nearApiJs.InMemorySigner.fromKeyPair(this.chainRef, this.accountName, key);
        const { message, timestamp } = util_1.getConsentMessage(did, true);
        const signature = await getSignature(signer, this.accountName, message, this.chainRef);
        const account = await this.accountId();
        return {
            version: 2,
            type: 'near',
            message,
            signature,
            account: account.toString(),
            timestamp,
        };
    }
    async accountId() {
        const key = await this.near.connection.signer.keyStore.getKey(this.chainRef, this.accountName);
        const signer = await nearApiJs.InMemorySigner.fromKeyPair(this.chainRef, this.accountName, key);
        const publicKey = await signer.getPublicKey(this.accountName, this.chainRef);
        const address = uint8arrays.toString(publicKey.data, 'base58btc');
        return new caip_1.AccountID({
            address: address,
            chainId: `near:${this.chainRef}`,
        });
    }
    withAddress(address) {
        return new NearAuthProvider(this.near, address, this.chainRef);
    }
}
exports.NearAuthProvider = NearAuthProvider;
//# sourceMappingURL=near.js.map