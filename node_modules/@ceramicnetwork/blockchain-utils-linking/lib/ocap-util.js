"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.w3cDate = exports.buildOcapRequestMessage = exports.OcapTypes = void 0;
var OcapTypes;
(function (OcapTypes) {
    OcapTypes["EIP4361"] = "EIP-4361";
})(OcapTypes = exports.OcapTypes || (exports.OcapTypes = {}));
function buildOcapRequestMessage(opts) {
    if (opts.type !== OcapTypes.EIP4361) {
        throw new Error('Unsupported type');
    }
    let res = '';
    res += `${opts.domain} wants you to sign in with your Ethereum account: \n`;
    res += opts.address + '\n';
    if (opts.statement) {
        res += '\n';
        res += opts.statement;
        res += '\n\n';
    }
    res += `URI: ${opts.did} \n`;
    res += 'Version: 1 \n';
    res += `Chain ID: ${opts.chainId} \n`;
    if (opts.nonce.length < 8) {
        throw new Error(`Nonce must be at least 8 characters`);
    }
    res += `Nonce: ${opts.nonce} \n`;
    res += `Issued At: ${w3cDate(opts.issuedAt)} \n`;
    if (opts.expiresAt) {
        res += `Expiration Time: ${w3cDate(opts.expiresAt)} \n`;
    }
    if (opts.notBefore) {
        res += `Not Before: ${w3cDate(opts.notBefore)} \n`;
    }
    if (opts.requestId) {
        res += `Request ID: ${opts.requestId} \n`;
    }
    res += 'Resources: \n';
    for (const streamId of opts.streams) {
        res += `- ${streamId.toUrl()} \n`;
    }
    return res;
}
exports.buildOcapRequestMessage = buildOcapRequestMessage;
function w3cDate(date) {
    let result = new Date();
    if (typeof date === 'number' || typeof date === 'string') {
        result = new Date(date);
    }
    const str = result.toISOString();
    return str.substr(0, str.length - 5) + 'Z';
}
exports.w3cDate = w3cDate;
//# sourceMappingURL=ocap-util.js.map