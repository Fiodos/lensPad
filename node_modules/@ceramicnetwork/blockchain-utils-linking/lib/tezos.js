"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TezosAuthProvider = exports.TEZOS_CHAIN_REF = exports.TEZOS_NAMESPACE = void 0;
const caip_1 = require("caip");
const util_1 = require("./util");
const sha256_1 = require("@stablelib/sha256");
const uint8arrays = __importStar(require("uint8arrays"));
exports.TEZOS_NAMESPACE = 'tezos';
exports.TEZOS_CHAIN_REF = 'NetXdQprcVkpaWU';
function encodeMessage(text) {
    const michelinePrefix = '05';
    const stringPrefix = '01';
    const len = ('0000000' + text.length.toString(16)).slice(-8);
    text = uint8arrays.toString(uint8arrays.fromString(text, 'utf-8'), 'hex');
    return michelinePrefix + stringPrefix + len + text;
}
async function sign(provider, message) {
    message = encodeMessage(message);
    const { prefixSig: signature } = await provider.signer.sign(message);
    return signature;
}
async function getActiveAddress(provider) {
    return provider.signer.publicKeyHash();
}
class TezosAuthProvider {
    constructor(provider) {
        this.provider = provider;
        this.isAuthProvider = true;
        if (provider.signer === undefined) {
            throw new Error('a `Signer` is required to use the `TezosAuthProvider`');
        }
    }
    async authenticate(message) {
        const signature = await sign(this.provider, message);
        const digest = sha256_1.hash(uint8arrays.fromString(signature));
        return `0x${uint8arrays.toString(digest, 'base16')}`;
    }
    async createLink(did) {
        const { message, timestamp } = util_1.getConsentMessage(did);
        const signature = await sign(this.provider, message);
        const address = await getActiveAddress(this.provider);
        const caipAccount = new caip_1.AccountID({
            address,
            chainId: `${exports.TEZOS_NAMESPACE}:${exports.TEZOS_CHAIN_REF}`,
        });
        const proof = {
            version: 2,
            message,
            signature,
            account: caipAccount.toString(),
            timestamp,
        };
        return proof;
    }
    async accountId() {
        const address = await getActiveAddress(this.provider);
        return new caip_1.AccountID({
            address,
            chainId: `${exports.TEZOS_NAMESPACE}:${exports.TEZOS_CHAIN_REF}`,
        });
    }
    withAddress(_address) {
        throw new Error('TezosAuthProvider does not support withAddress');
    }
}
exports.TezosAuthProvider = TezosAuthProvider;
//# sourceMappingURL=tezos.js.map