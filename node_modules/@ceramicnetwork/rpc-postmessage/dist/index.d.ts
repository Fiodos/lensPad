import type { TransportSubject, UnwrapObservableOptions, Wrapped } from '@ceramicnetwork/transport-subject';
import type { IncomingMessage, MessageFilter, PostMessageTarget } from '@ceramicnetwork/transport-postmessage';
import { RPCClient } from 'rpc-utils';
import type { HandlerMethods, HandlerOptions, RPCMethods, RPCRequest, RPCResponse, SendRequestFunc } from 'rpc-utils';
import type { Observable, OperatorFunction, Subscription } from 'rxjs';
export declare type ServerOptions<Context, Methods extends RPCMethods> = HandlerOptions<Context, Methods> & {
    target: PostMessageTarget;
    methods: HandlerMethods<Context, Methods>;
};
export declare function serve<Methods extends RPCMethods>({ target, methods, ...options }: ServerOptions<null, Methods>): Subscription;
export declare type RequestPayload<Message, Methods extends RPCMethods, K extends keyof Methods> = {
    type: 'request';
    message: Message;
    request: RPCRequest<Methods, K>;
};
export declare type HandledPayload<Message, Methods extends RPCMethods, K extends keyof Methods> = {
    type: 'handled';
    message: Message;
    request: RPCRequest<Methods, K>;
    response: RPCResponse<Methods, K> | null;
};
export declare function createNamespaceRequestHandlerOperator<Methods extends RPCMethods, Namespace extends string = string, Message = IncomingMessage<Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>>>(methods: HandlerMethods<Message, Methods>, namespace: Namespace, options?: HandlerOptions<Message, Methods>): OperatorFunction<Message, HandledPayload<Message, Methods, keyof Methods>>;
export declare type NamespaceServerOptions<Methods extends RPCMethods, Namespace extends string = string, Message = IncomingMessage<Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>>> = ServerOptions<Message, Methods> & {
    namespace: Namespace;
    filter?: string | Array<string> | MessageFilter;
};
export declare function createNamespaceServer<Methods extends RPCMethods, Namespace extends string = string, Request = Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>>({ filter: messageFilter, methods, namespace, target, ...options }: NamespaceServerOptions<Methods, Namespace, IncomingMessage<Request>>): Observable<HandledPayload<IncomingMessage<Request>, Methods, keyof Methods>>;
export declare type NamespaceClientTransport<Methods extends RPCMethods, Namespace extends string, Incoming = IncomingMessage<Wrapped<RPCResponse<Methods, keyof Methods>, Namespace>>, Outgoing = Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>> = TransportSubject<Incoming, Outgoing>;
export declare function createNamespaceSendRequest<Methods extends RPCMethods, Namespace extends string = string>(transport: NamespaceClientTransport<Methods, Namespace>, namespace: Namespace, options?: UnwrapObservableOptions): SendRequestFunc<Methods>;
export declare function createNamespaceClient<Methods extends RPCMethods, Namespace extends string = string>(transport: NamespaceClientTransport<Methods, Namespace>, namespace: Namespace, options?: UnwrapObservableOptions): RPCClient<Methods>;
