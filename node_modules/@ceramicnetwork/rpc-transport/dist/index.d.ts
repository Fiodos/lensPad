import { TransportSubject } from '@ceramicnetwork/transport-subject';
import { RPCClient } from 'rpc-utils';
import type { HandlerMethods, HandlerOptions, RPCMethods, RPCRequest, RPCResponse, SendRequestFunc } from 'rpc-utils';
import type { OperatorFunction, Subscription } from 'rxjs';
export declare type RPCClientTransport<Methods extends RPCMethods, Incoming = RPCResponse<Methods, keyof Methods>, Outgoing = RPCRequest<Methods, keyof Methods>> = TransportSubject<Incoming, Outgoing>;
export declare type RPCServerTransport<Methods extends RPCMethods, Incoming = RPCRequest<Methods, keyof Methods>, Outgoing = RPCResponse<Methods, keyof Methods>> = TransportSubject<Incoming, Outgoing>;
export declare function createSendRequest<Methods extends RPCMethods>(transport: RPCClientTransport<Methods>): SendRequestFunc<Methods>;
export declare function createClient<Methods extends RPCMethods>(transport: RPCClientTransport<Methods>): RPCClient<Methods>;
export declare function createHandlerOperator<Context, Methods extends RPCMethods>(context: Context, methods: HandlerMethods<Context, Methods>, options?: HandlerOptions<Context, Methods>): OperatorFunction<RPCRequest<Methods, keyof Methods>, RPCResponse<Methods, keyof Methods> | null>;
export declare function serve<Context, Methods extends RPCMethods>(transport: RPCServerTransport<Methods>, context: Context, methods: HandlerMethods<Context, Methods>, options?: HandlerOptions<Context, Methods>): Subscription;
