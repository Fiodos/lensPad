import type { HandledPayload } from '@ceramicnetwork/rpc-postmessage';
import type { UnwrapObservableOptions, Wrapped } from '@ceramicnetwork/transport-subject';
import type { IncomingMessage, PostMessageTransportOptions } from '@ceramicnetwork/transport-postmessage';
import { RPCClient } from 'rpc-utils';
import type { HandlerMethods, RPCMethods, RPCRequest } from 'rpc-utils';
import type { Observable } from 'rxjs';
export declare type ClientOptions = UnwrapObservableOptions & PostMessageTransportOptions;
export declare type IncomingRequest<Methods extends RPCMethods, Namespace extends string = string> = IncomingMessage<Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>>;
export declare type ServerPayload<Methods extends RPCMethods, Namespace extends string> = HandledPayload<IncomingRequest<Methods, Namespace>, Methods, keyof Methods>;
export declare function createClient<Methods extends RPCMethods, Namespace extends string = string>(namespace: Namespace, target?: Window, options?: ClientOptions): RPCClient<Methods>;
export declare function createServer<Methods extends RPCMethods, Namespace extends string = string>(namespace: Namespace, methods: HandlerMethods<IncomingRequest<Methods, Namespace>, Methods>, target?: Window): Observable<ServerPayload<Methods, Namespace>>;
