{"version":3,"file":"rpc-window.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { createNamespaceClient, createNamespaceServer } from '@ceramicnetwork/rpc-postmessage'\nimport type { HandledPayload } from '@ceramicnetwork/rpc-postmessage'\nimport type { UnwrapObservableOptions, Wrapped } from '@ceramicnetwork/transport-subject'\nimport { createPostMessageTransport } from '@ceramicnetwork/transport-postmessage'\nimport type {\n  IncomingMessage,\n  PostMessageTransportOptions,\n} from '@ceramicnetwork/transport-postmessage'\nimport { RPCClient } from 'rpc-utils'\nimport type { HandlerMethods, RPCMethods, RPCRequest, RPCResponse } from 'rpc-utils'\nimport type { Observable } from 'rxjs'\n\nexport type ClientOptions = UnwrapObservableOptions & PostMessageTransportOptions\n\nexport type IncomingRequest<\n  Methods extends RPCMethods,\n  Namespace extends string = string\n> = IncomingMessage<Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>>\n\nexport type ServerPayload<Methods extends RPCMethods, Namespace extends string> = HandledPayload<\n  IncomingRequest<Methods, Namespace>,\n  Methods,\n  keyof Methods\n>\n\nconst DEFAULT_OPTIONS: ClientOptions = {\n  onInvalidInput: (_input: unknown, _error: Error) => {\n    // Silence warnings of invalid messages, such as message events sent by third-parties\n  },\n  // Client requests will be sent without origin restriction\n  postMessageArguments: ['*'],\n}\n\nexport function createClient<Methods extends RPCMethods, Namespace extends string = string>(\n  namespace: Namespace,\n  target: Window = window,\n  options: ClientOptions = DEFAULT_OPTIONS\n): RPCClient<Methods> {\n  const transport = createPostMessageTransport<\n    Wrapped<RPCResponse<Methods, keyof Methods>, Namespace>,\n    Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>\n  >(window, target, options)\n  return createNamespaceClient<Methods, Namespace>(transport, namespace, options)\n}\n\nexport function createServer<Methods extends RPCMethods, Namespace extends string = string>(\n  namespace: Namespace,\n  methods: HandlerMethods<IncomingRequest<Methods, Namespace>, Methods>,\n  target: Window = window\n): Observable<ServerPayload<Methods, Namespace>> {\n  return createNamespaceServer<Methods, Namespace>({ methods, namespace, target })\n}\n"],"names":["DEFAULT_OPTIONS","onInvalidInput","_input","_error","postMessageArguments","namespace","target","options","window","transport","createPostMessageTransport","createNamespaceClient","methods","createNamespaceServer"],"mappings":"wKAyBMA,EAAiC,CACrCC,eAAgB,SAACC,EAAiBC,KAIlCC,qBAAsB,CAAC,oCAIvBC,EACAC,EACAC,YADAD,IAAAA,EAAiBE,iBACjBD,IAAAA,EAAyBP,OAEnBS,EAAYC,6BAGhBF,OAAQF,EAAQC,UACXI,wBAA0CF,EAAWJ,EAAWE,kCAIvEF,EACAO,EACAN,mBAAAA,IAAAA,EAAiBE,QAEVK,wBAA0C,CAAED,QAAAA,EAASP,UAAAA,EAAWC,OAAAA"}