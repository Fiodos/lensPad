{"version":3,"file":"rpc-window.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { createNamespaceClient, createNamespaceServer } from '@ceramicnetwork/rpc-postmessage'\nimport type { HandledPayload } from '@ceramicnetwork/rpc-postmessage'\nimport type { UnwrapObservableOptions, Wrapped } from '@ceramicnetwork/transport-subject'\nimport { createPostMessageTransport } from '@ceramicnetwork/transport-postmessage'\nimport type {\n  IncomingMessage,\n  PostMessageTransportOptions,\n} from '@ceramicnetwork/transport-postmessage'\nimport { RPCClient } from 'rpc-utils'\nimport type { HandlerMethods, RPCMethods, RPCRequest, RPCResponse } from 'rpc-utils'\nimport type { Observable } from 'rxjs'\n\nexport type ClientOptions = UnwrapObservableOptions & PostMessageTransportOptions\n\nexport type IncomingRequest<\n  Methods extends RPCMethods,\n  Namespace extends string = string\n> = IncomingMessage<Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>>\n\nexport type ServerPayload<Methods extends RPCMethods, Namespace extends string> = HandledPayload<\n  IncomingRequest<Methods, Namespace>,\n  Methods,\n  keyof Methods\n>\n\nconst DEFAULT_OPTIONS: ClientOptions = {\n  onInvalidInput: (_input: unknown, _error: Error) => {\n    // Silence warnings of invalid messages, such as message events sent by third-parties\n  },\n  // Client requests will be sent without origin restriction\n  postMessageArguments: ['*'],\n}\n\nexport function createClient<Methods extends RPCMethods, Namespace extends string = string>(\n  namespace: Namespace,\n  target: Window = window,\n  options: ClientOptions = DEFAULT_OPTIONS\n): RPCClient<Methods> {\n  const transport = createPostMessageTransport<\n    Wrapped<RPCResponse<Methods, keyof Methods>, Namespace>,\n    Wrapped<RPCRequest<Methods, keyof Methods>, Namespace>\n  >(window, target, options)\n  return createNamespaceClient<Methods, Namespace>(transport, namespace, options)\n}\n\nexport function createServer<Methods extends RPCMethods, Namespace extends string = string>(\n  namespace: Namespace,\n  methods: HandlerMethods<IncomingRequest<Methods, Namespace>, Methods>,\n  target: Window = window\n): Observable<ServerPayload<Methods, Namespace>> {\n  return createNamespaceServer<Methods, Namespace>({ methods, namespace, target })\n}\n"],"names":["DEFAULT_OPTIONS","onInvalidInput","_input","_error","postMessageArguments","createClient","namespace","target","options","window","transport","createPostMessageTransport","createNamespaceClient","createServer","methods","createNamespaceServer"],"mappings":";;;AAyBA,IAAMA,eAAe,GAAkB;AACrCC,EAAAA,cAAc,EAAE,wBAACC,MAAD,EAAkBC,MAAlB;AAEf,GAHoC;AAIrC;AACAC,EAAAA,oBAAoB,EAAE,CAAC,GAAD;AALe,CAAvC;SAQgBC,aACdC,WACAC,QACAC;MADAD;AAAAA,IAAAA,SAAiBE;;;MACjBD;AAAAA,IAAAA,UAAyBR;;;AAEzB,MAAMU,SAAS,GAAGC,0BAA0B,CAG1CF,MAH0C,EAGlCF,MAHkC,EAG1BC,OAH0B,CAA5C;AAIA,SAAOI,qBAAqB,CAAqBF,SAArB,EAAgCJ,SAAhC,EAA2CE,OAA3C,CAA5B;AACD;SAEeK,aACdP,WACAQ,SACAP;MAAAA;AAAAA,IAAAA,SAAiBE;;;AAEjB,SAAOM,qBAAqB,CAAqB;AAAED,IAAAA,OAAO,EAAPA,OAAF;AAAWR,IAAAA,SAAS,EAATA,SAAX;AAAsBC,IAAAA,MAAM,EAANA;AAAtB,GAArB,CAA5B;AACD;;;;"}