import { TransportSubject } from '@ceramicnetwork/transport-subject';
import type { Observable, Observer } from 'rxjs';
export interface PostMessageEventMap {
    message: MessageEvent;
    messageerror: MessageEvent;
}
export interface PostMessageTarget extends EventTarget {
    onmessage: ((this: any, ev: MessageEvent) => any) | null;
    onmessageerror: ((this: any, ev: MessageEvent) => any) | null;
    postMessage(...args: Array<any>): void;
    addEventListener<K extends keyof PostMessageEventMap>(type: K, listener: (this: any, ev: PostMessageEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof PostMessageEventMap>(type: K, listener: (this: any, ev: PostMessageEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}
export declare type MessageFilter = (event: MessageEvent) => boolean;
export interface IncomingMessage<Data = any> extends MessageEvent {
    readonly data: Data;
}
export declare function createOriginFilter<Event extends MessageEvent>(allowedOrigin: string | Array<string>): (event: Event) => boolean;
export declare function createMessageObservable<MessageData = any>(target: PostMessageTarget, originOrFilter?: string | Array<string> | MessageFilter): Observable<IncomingMessage<MessageData>>;
export declare function createPostMessageObserver<MessageData = any>(target: PostMessageTarget, ...args: Array<any>): Observer<MessageData>;
export declare type PostMessageTransportOptions = {
    filter?: string | Array<string> | MessageFilter;
    postMessageArguments?: Array<any>;
};
export declare function createPostMessageTransport<MsgIn, MsgOut = MsgIn>(from: PostMessageTarget, to?: PostMessageTarget, { filter, postMessageArguments }?: PostMessageTransportOptions): TransportSubject<IncomingMessage<MsgIn>, MsgOut>;
