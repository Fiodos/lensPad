import { Subject, Subscriber, Subscription } from 'rxjs';
import type { Observable, Observer, OperatorFunction } from 'rxjs';
export declare class TransportSubject<MsgIn, MsgOut = MsgIn> extends Subject<MsgIn> {
    _source: Observable<MsgIn>;
    _sink: Observer<MsgOut>;
    constructor(source: Observable<MsgIn>, sink: Observer<MsgOut>);
    next(message: MsgOut): void;
    error(err: any): void;
    complete(): void;
    _subscribe(subscriber: Subscriber<MsgIn>): Subscription;
}
export declare type Wrapper<MsgIn, MsgOut, WrappedOut> = {
    wrap: (msg: MsgOut) => WrappedOut;
    unwrap: (input: any) => MsgIn;
};
export declare type Wrapped<Message, Namespace extends string = string> = {
    __tw: true;
    msg: Message;
    ns: Namespace;
};
export declare function createWrap<MsgOut, Namespace extends string = string>(namespace: Namespace): (msg: MsgOut) => Wrapped<MsgOut, Namespace>;
export declare function createUnwrap<MsgIn, Namespace extends string = string>(namespace: Namespace): (input: any) => MsgIn;
export declare function createWrapper<MsgIn, MsgOut = MsgIn, Namespace extends string = string>(namespace: Namespace): Wrapper<MsgIn, MsgOut, Wrapped<MsgOut, Namespace>>;
export declare type UnwrapObservableOptions = {
    onInvalidInput?: (input: unknown, error: Error) => void;
    throwWhenInvalid?: boolean;
};
export declare function createUnwrapOperator<WrappedIn, MsgIn>(unwrap: (input: any) => MsgIn, options?: UnwrapObservableOptions): OperatorFunction<WrappedIn, MsgIn>;
export declare function createWrapObserver<MsgOut, WrappedOut>(observer: Observer<WrappedOut>, wrap: (msg: MsgOut) => WrappedOut): Observer<MsgOut>;
export declare function createWrappedTransport<MsgIn, MsgOut, WrappedIn, WrappedOut = WrappedIn>(transport: TransportSubject<WrappedIn, WrappedOut>, { wrap, unwrap }: Wrapper<MsgIn, MsgOut, WrappedOut>, options?: UnwrapObservableOptions): TransportSubject<MsgIn, MsgOut>;
export declare function createNamespacedTransport<MsgIn, MsgOut = MsgIn, Namespace extends string = string>(transport: TransportSubject<Wrapped<MsgIn, Namespace>, Wrapped<MsgOut, Namespace>>, namespace: Namespace, options?: UnwrapObservableOptions): TransportSubject<MsgIn, MsgOut>;
