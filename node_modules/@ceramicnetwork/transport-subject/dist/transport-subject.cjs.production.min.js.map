{"version":3,"file":"transport-subject.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Subject, Subscriber, Subscription, pipe } from 'rxjs'\nimport type { Observable, Observer, OperatorFunction } from 'rxjs'\nimport { filter, map } from 'rxjs/operators'\n\nexport class TransportSubject<MsgIn, MsgOut = MsgIn> extends Subject<MsgIn> {\n  _source: Observable<MsgIn>\n  _sink: Observer<MsgOut>\n\n  constructor(source: Observable<MsgIn>, sink: Observer<MsgOut>) {\n    super()\n    this._source = source\n    this._sink = sink\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore MsgOut can be different from MsgIn\n  next(message: MsgOut): void {\n    this._sink.next?.(message)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  error(err: any): void {\n    this._sink.error?.(err)\n  }\n\n  complete(): void {\n    this._sink.complete?.()\n  }\n\n  _subscribe(subscriber: Subscriber<MsgIn>): Subscription {\n    return this._source.subscribe(subscriber) ?? Subscription.EMPTY\n  }\n}\n\nexport type Wrapper<MsgIn, MsgOut, WrappedOut> = {\n  wrap: (msg: MsgOut) => WrappedOut\n  unwrap: (input: any) => MsgIn\n}\n\nexport type Wrapped<Message, Namespace extends string = string> = {\n  __tw: true\n  msg: Message\n  ns: Namespace\n}\n\nexport function createWrap<MsgOut, Namespace extends string = string>(namespace: Namespace) {\n  return function wrap(msg: MsgOut): Wrapped<MsgOut, Namespace> {\n    return { __tw: true, ns: namespace, msg }\n  }\n}\n\nexport function createUnwrap<MsgIn, Namespace extends string = string>(namespace: Namespace) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return function unwrap(input: any): MsgIn {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    if (input.__tw !== true) {\n      throw new Error('Input is not a wrapped message')\n    }\n    if (typeof input.ns !== 'string') {\n      throw new Error(\n        `Invalid namespace type for wrapped message: expected a string, got ${typeof input.ns}`\n      )\n    }\n    if (input.ns !== namespace) {\n      throw new Error(\n        `Invalid namespace for wrapped message: expected ${namespace}, got ${input.ns as string}`\n      )\n    }\n    return input.msg as MsgIn\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  }\n}\n\nexport function createWrapper<MsgIn, MsgOut = MsgIn, Namespace extends string = string>(\n  namespace: Namespace\n): Wrapper<MsgIn, MsgOut, Wrapped<MsgOut, Namespace>> {\n  return { wrap: createWrap(namespace), unwrap: createUnwrap(namespace) }\n}\n\nexport type UnwrapObservableOptions = {\n  onInvalidInput?: (input: unknown, error: Error) => void\n  throwWhenInvalid?: boolean\n}\n\nexport function createUnwrapOperator<WrappedIn, MsgIn>(\n  unwrap: (input: any) => MsgIn,\n  options: UnwrapObservableOptions = {}\n): OperatorFunction<WrappedIn, MsgIn> {\n  if (options.throwWhenInvalid) {\n    return pipe(map(unwrap))\n  }\n\n  const onInvalid =\n    typeof options.onInvalidInput === 'function'\n      ? options.onInvalidInput\n      : function onInvalid(input: unknown, error: Error) {\n          console.warn('Invalid transport input', input, error)\n        }\n  return pipe(\n    map((input) => {\n      try {\n        return unwrap(input)\n      } catch (err) {\n        onInvalid(input, err)\n        return null\n      }\n    }),\n    filter((msg): msg is MsgIn => msg !== null)\n  )\n}\n\nexport function createWrapObserver<MsgOut, WrappedOut>(\n  observer: Observer<WrappedOut>,\n  wrap: (msg: MsgOut) => WrappedOut\n): Observer<MsgOut> {\n  return new Subscriber((msg) => {\n    if (msg != null) {\n      observer.next(wrap(msg))\n    }\n  })\n}\n\nexport function createWrappedTransport<MsgIn, MsgOut, WrappedIn, WrappedOut = WrappedIn>(\n  transport: TransportSubject<WrappedIn, WrappedOut>,\n  { wrap, unwrap }: Wrapper<MsgIn, MsgOut, WrappedOut>,\n  options: UnwrapObservableOptions = {}\n): TransportSubject<MsgIn, MsgOut> {\n  const source = transport.pipe(createUnwrapOperator<WrappedIn, MsgIn>(unwrap, options))\n  const sink = createWrapObserver(transport, wrap)\n  return new TransportSubject(source, sink)\n}\n\nexport function createNamespacedTransport<MsgIn, MsgOut = MsgIn, Namespace extends string = string>(\n  transport: TransportSubject<Wrapped<MsgIn, Namespace>, Wrapped<MsgOut, Namespace>>,\n  namespace: Namespace,\n  options?: UnwrapObservableOptions\n): TransportSubject<MsgIn, MsgOut> {\n  return createWrappedTransport(transport, createWrapper(namespace), options)\n}\n"],"names":["TransportSubject","source","sink","_source","_sink","next","message","error","err","complete","_subscribe","subscriber","this","subscribe","Subscription","EMPTY","Subject","createWrap","namespace","msg","__tw","ns","createUnwrap","input","Error","createWrapper","wrap","unwrap","createUnwrapOperator","options","throwWhenInvalid","pipe","map","onInvalid","onInvalidInput","console","warn","filter","createWrapObserver","observer","Subscriber","createWrappedTransport","transport"],"mappings":"sNAIaA,iCAICC,EAA2BC,sCAEhCC,QAAUF,IACVG,MAAQF,+GAKfG,KAAA,SAAKC,4BACEF,OAAMC,gBAAOC,MAIpBC,MAAA,SAAMC,4BACCJ,OAAMG,iBAAQC,MAGrBC,SAAA,oCACOL,OAAMK,wBAGbC,WAAA,SAAWC,yBACFC,KAAKT,QAAQU,UAAUF,MAAeG,eAAaC,UA1BDC,oBAyC7CC,EAAsDC,UAC7D,SAAcC,SACZ,CAAEC,MAAM,EAAMC,GAAIH,EAAWC,IAAAA,aAIxBG,EAAuDJ,UAE9D,SAAgBK,OAEF,IAAfA,EAAMH,WACF,IAAII,MAAM,qCAEM,iBAAbD,EAAMF,SACT,IAAIG,mFACqED,EAAMF,OAGnFE,EAAMF,KAAOH,QACT,IAAIM,yDAC2CN,WAAkBK,EAAMF,WAGxEE,EAAMJ,cAKDM,EACdP,SAEO,CAAEQ,KAAMT,EAAWC,GAAYS,OAAQL,EAAaJ,aAQ7CU,EACdD,EACAE,eAAAA,IAAAA,EAAmC,IAE/BA,EAAQC,wBACHC,OAAKC,MAAIL,QAGZM,EAC8B,mBAA3BJ,EAAQK,eACXL,EAAQK,eACR,SAAmBX,EAAgBhB,GACjC4B,QAAQC,KAAK,0BAA2Bb,EAAOhB,WAEhDwB,OACLC,OAAI,SAACT,cAEMI,EAAOJ,GACd,MAAOf,UACPyB,EAAUV,EAAOf,GACV,SAGX6B,UAAO,SAAClB,UAA8B,OAARA,eAIlBmB,EACdC,EACAb,UAEO,IAAIc,cAAW,SAACrB,GACV,MAAPA,GACFoB,EAASlC,KAAKqB,EAAKP,gBAKTsB,EACdC,IAEAb,OADEH,IAAAA,cACFG,IAAAA,EAAmC,QAE7B5B,EAASyC,EAAUX,KAAKH,IAHtBD,OAGqEE,IACvE3B,EAAOoC,EAAmBI,EAAWhB,UACpC,IAAI1B,EAAiBC,EAAQC,yEAIpCwC,EACAxB,EACAW,UAEOY,EAAuBC,EAAWjB,EAAcP,GAAYW"}