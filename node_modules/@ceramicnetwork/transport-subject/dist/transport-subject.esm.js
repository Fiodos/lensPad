import { Subscription, pipe, Subscriber, Subject } from 'rxjs';
import { map, filter } from 'rxjs/operators';

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var TransportSubject = /*#__PURE__*/function (_Subject) {
  _inheritsLoose(TransportSubject, _Subject);

  function TransportSubject(source, sink) {
    var _this;

    _this = _Subject.call(this) || this;
    _this._source = source;
    _this._sink = sink;
    return _this;
  } // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore MsgOut can be different from MsgIn


  var _proto = TransportSubject.prototype;

  _proto.next = function next(message) {
    var _this$_sink$next, _this$_sink;

    (_this$_sink$next = (_this$_sink = this._sink).next) == null ? void 0 : _this$_sink$next.call(_this$_sink, message);
  } // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  ;

  _proto.error = function error(err) {
    var _this$_sink$error, _this$_sink2;

    (_this$_sink$error = (_this$_sink2 = this._sink).error) == null ? void 0 : _this$_sink$error.call(_this$_sink2, err);
  };

  _proto.complete = function complete() {
    var _this$_sink$complete, _this$_sink3;

    (_this$_sink$complete = (_this$_sink3 = this._sink).complete) == null ? void 0 : _this$_sink$complete.call(_this$_sink3);
  };

  _proto._subscribe = function _subscribe(subscriber) {
    var _this$_source$subscri;

    return (_this$_source$subscri = this._source.subscribe(subscriber)) != null ? _this$_source$subscri : Subscription.EMPTY;
  };

  return TransportSubject;
}(Subject);
function createWrap(namespace) {
  return function wrap(msg) {
    return {
      __tw: true,
      ns: namespace,
      msg: msg
    };
  };
}
function createUnwrap(namespace) {
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  return function unwrap(input) {
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    if (input.__tw !== true) {
      throw new Error('Input is not a wrapped message');
    }

    if (typeof input.ns !== 'string') {
      throw new Error("Invalid namespace type for wrapped message: expected a string, got " + typeof input.ns);
    }

    if (input.ns !== namespace) {
      throw new Error("Invalid namespace for wrapped message: expected " + namespace + ", got " + input.ns);
    }

    return input.msg;
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
  };
}
function createWrapper(namespace) {
  return {
    wrap: createWrap(namespace),
    unwrap: createUnwrap(namespace)
  };
}
function createUnwrapOperator(unwrap, options) {
  if (options === void 0) {
    options = {};
  }

  if (options.throwWhenInvalid) {
    return pipe(map(unwrap));
  }

  var onInvalid = typeof options.onInvalidInput === 'function' ? options.onInvalidInput : function onInvalid(input, error) {
    console.warn('Invalid transport input', input, error);
  };
  return pipe(map(function (input) {
    try {
      return unwrap(input);
    } catch (err) {
      onInvalid(input, err);
      return null;
    }
  }), filter(function (msg) {
    return msg !== null;
  }));
}
function createWrapObserver(observer, wrap) {
  return new Subscriber(function (msg) {
    if (msg != null) {
      observer.next(wrap(msg));
    }
  });
}
function createWrappedTransport(transport, _ref, options) {
  var wrap = _ref.wrap,
      unwrap = _ref.unwrap;

  if (options === void 0) {
    options = {};
  }

  var source = transport.pipe(createUnwrapOperator(unwrap, options));
  var sink = createWrapObserver(transport, wrap);
  return new TransportSubject(source, sink);
}
function createNamespacedTransport(transport, namespace, options) {
  return createWrappedTransport(transport, createWrapper(namespace), options);
}

export { TransportSubject, createNamespacedTransport, createUnwrap, createUnwrapOperator, createWrap, createWrapObserver, createWrappedTransport, createWrapper };
//# sourceMappingURL=transport-subject.esm.js.map
