{"version":3,"file":"transport-subject.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { Subject, Subscriber, Subscription, pipe } from 'rxjs'\nimport type { Observable, Observer, OperatorFunction } from 'rxjs'\nimport { filter, map } from 'rxjs/operators'\n\nexport class TransportSubject<MsgIn, MsgOut = MsgIn> extends Subject<MsgIn> {\n  _source: Observable<MsgIn>\n  _sink: Observer<MsgOut>\n\n  constructor(source: Observable<MsgIn>, sink: Observer<MsgOut>) {\n    super()\n    this._source = source\n    this._sink = sink\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore MsgOut can be different from MsgIn\n  next(message: MsgOut): void {\n    this._sink.next?.(message)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  error(err: any): void {\n    this._sink.error?.(err)\n  }\n\n  complete(): void {\n    this._sink.complete?.()\n  }\n\n  _subscribe(subscriber: Subscriber<MsgIn>): Subscription {\n    return this._source.subscribe(subscriber) ?? Subscription.EMPTY\n  }\n}\n\nexport type Wrapper<MsgIn, MsgOut, WrappedOut> = {\n  wrap: (msg: MsgOut) => WrappedOut\n  unwrap: (input: any) => MsgIn\n}\n\nexport type Wrapped<Message, Namespace extends string = string> = {\n  __tw: true\n  msg: Message\n  ns: Namespace\n}\n\nexport function createWrap<MsgOut, Namespace extends string = string>(namespace: Namespace) {\n  return function wrap(msg: MsgOut): Wrapped<MsgOut, Namespace> {\n    return { __tw: true, ns: namespace, msg }\n  }\n}\n\nexport function createUnwrap<MsgIn, Namespace extends string = string>(namespace: Namespace) {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return function unwrap(input: any): MsgIn {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    if (input.__tw !== true) {\n      throw new Error('Input is not a wrapped message')\n    }\n    if (typeof input.ns !== 'string') {\n      throw new Error(\n        `Invalid namespace type for wrapped message: expected a string, got ${typeof input.ns}`\n      )\n    }\n    if (input.ns !== namespace) {\n      throw new Error(\n        `Invalid namespace for wrapped message: expected ${namespace}, got ${input.ns as string}`\n      )\n    }\n    return input.msg as MsgIn\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  }\n}\n\nexport function createWrapper<MsgIn, MsgOut = MsgIn, Namespace extends string = string>(\n  namespace: Namespace\n): Wrapper<MsgIn, MsgOut, Wrapped<MsgOut, Namespace>> {\n  return { wrap: createWrap(namespace), unwrap: createUnwrap(namespace) }\n}\n\nexport type UnwrapObservableOptions = {\n  onInvalidInput?: (input: unknown, error: Error) => void\n  throwWhenInvalid?: boolean\n}\n\nexport function createUnwrapOperator<WrappedIn, MsgIn>(\n  unwrap: (input: any) => MsgIn,\n  options: UnwrapObservableOptions = {}\n): OperatorFunction<WrappedIn, MsgIn> {\n  if (options.throwWhenInvalid) {\n    return pipe(map(unwrap))\n  }\n\n  const onInvalid =\n    typeof options.onInvalidInput === 'function'\n      ? options.onInvalidInput\n      : function onInvalid(input: unknown, error: Error) {\n          console.warn('Invalid transport input', input, error)\n        }\n  return pipe(\n    map((input) => {\n      try {\n        return unwrap(input)\n      } catch (err) {\n        onInvalid(input, err)\n        return null\n      }\n    }),\n    filter((msg): msg is MsgIn => msg !== null)\n  )\n}\n\nexport function createWrapObserver<MsgOut, WrappedOut>(\n  observer: Observer<WrappedOut>,\n  wrap: (msg: MsgOut) => WrappedOut\n): Observer<MsgOut> {\n  return new Subscriber((msg) => {\n    if (msg != null) {\n      observer.next(wrap(msg))\n    }\n  })\n}\n\nexport function createWrappedTransport<MsgIn, MsgOut, WrappedIn, WrappedOut = WrappedIn>(\n  transport: TransportSubject<WrappedIn, WrappedOut>,\n  { wrap, unwrap }: Wrapper<MsgIn, MsgOut, WrappedOut>,\n  options: UnwrapObservableOptions = {}\n): TransportSubject<MsgIn, MsgOut> {\n  const source = transport.pipe(createUnwrapOperator<WrappedIn, MsgIn>(unwrap, options))\n  const sink = createWrapObserver(transport, wrap)\n  return new TransportSubject(source, sink)\n}\n\nexport function createNamespacedTransport<MsgIn, MsgOut = MsgIn, Namespace extends string = string>(\n  transport: TransportSubject<Wrapped<MsgIn, Namespace>, Wrapped<MsgOut, Namespace>>,\n  namespace: Namespace,\n  options?: UnwrapObservableOptions\n): TransportSubject<MsgIn, MsgOut> {\n  return createWrappedTransport(transport, createWrapper(namespace), options)\n}\n"],"names":["TransportSubject","source","sink","_source","_sink","next","message","error","err","complete","_subscribe","subscriber","subscribe","Subscription","EMPTY","Subject","createWrap","namespace","wrap","msg","__tw","ns","createUnwrap","unwrap","input","Error","createWrapper","createUnwrapOperator","options","throwWhenInvalid","pipe","map","onInvalid","onInvalidInput","console","warn","filter","createWrapObserver","observer","Subscriber","createWrappedTransport","transport","createNamespacedTransport"],"mappings":"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"}