{"version":3,"file":"idx-tools.cjs.production.min.js","sources":["../../../node_modules/regenerator-runtime/runtime.js","../src/utils.ts","../src/signing.ts","../src/definitions.ts","../src/encoding.ts","../src/signed/index.ts","../src/validate.ts","../src/publishing.ts","../src/docset.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import type { StreamRef } from '@ceramicnetwork/streamid'\n\nexport function docIDToString(id: StreamRef | string): string {\n  return typeof id === 'string' ? id : id.toString()\n}\n\nexport function applyMap<\n  M extends Record<string, unknown>,\n  V extends M[keyof M] = M[keyof M],\n  R = unknown\n>(inputs: M, callFunc: (input: V) => R): Record<keyof M, R> {\n  return Object.entries(inputs).reduce((acc, [key, value]) => {\n    acc[key as keyof M] = callFunc(value as V)\n    return acc\n  }, {} as Record<keyof M, R>)\n}\n\nexport async function promiseMap<\n  M extends Record<string, unknown>,\n  V extends M[keyof M] = M[keyof M],\n  R = unknown\n>(inputs: M, callFunc: (input: V) => Promise<R>): Promise<Record<keyof M, R>> {\n  const results = await Promise.all(Object.values(inputs).map((value) => callFunc(value as any)))\n  return Object.keys(inputs).reduce((acc, key, i) => {\n    acc[key as keyof M] = results[i]\n    return acc\n  }, {} as Record<keyof M, R>)\n}\n","import type StreamID from '@ceramicnetwork/streamid'\nimport type { DagJWSResult, DID } from 'dids'\n\nimport * as schemas from './schemas'\nimport type { Definition, SignedSchemas, Schema } from './types'\nimport { docIDToString, promiseMap } from './utils'\n\nexport async function signTile<T = unknown>(\n  did: DID,\n  data: T,\n  schema?: StreamID | string\n): Promise<DagJWSResult> {\n  if (!did.authenticated) {\n    throw new Error('DID must be authenticated')\n  }\n\n  const header = {\n    controllers: [did.id],\n    schema: schema ? docIDToString(schema) : undefined,\n  }\n  return await did.createDagJWS({ data, doctype: 'tile', header }, { did: did.id })\n}\n\nexport async function signIDXDefinitions(\n  did: DID,\n  definitionSchema: StreamID | string,\n  definitions: Record<string, Definition>\n): Promise<Record<string, Array<DagJWSResult>>> {\n  const schema = docIDToString(definitionSchema)\n  return await promiseMap(definitions, async (definition: Definition) => {\n    return [await signTile(did, definition, schema)]\n  })\n}\n\nexport async function signIDXSchemas(did: DID): Promise<SignedSchemas> {\n  return await promiseMap(schemas, async (schema: Schema) => {\n    return [await signTile(did, schema)]\n  })\n}\n","import type { DefinitionName, PublishedSchemas } from '@ceramicstudio/idx-constants'\nimport type { DID } from 'dids'\n\nimport { signIDXDefinitions } from './signing'\nimport type { Definition, SignedDefinitions } from './types'\n\nexport function createIDXDefinitions(\n  schemas: PublishedSchemas\n): Record<DefinitionName, Definition> {\n  return {\n    alsoKnownAs: {\n      name: 'Also Known As',\n      description:\n        'Also Known As is a data set that stores a list of accounts that are publicly linked to the users DID',\n      schema: schemas.AlsoKnownAs,\n    },\n    basicProfile: {\n      name: 'Basic Profile',\n      description: 'Basic profile information for a DID',\n      schema: schemas.BasicProfile,\n    },\n    cryptoAccounts: {\n      name: 'Crypto Accounts',\n      description: 'Crypto accounts linked to your DID',\n      schema: schemas.CryptoAccounts,\n    },\n    threeIdKeychain: {\n      name: '3ID Keychain',\n      description: 'Key data for 3ID',\n      schema: schemas.ThreeIdKeychain,\n    },\n  }\n}\n\nexport async function createIDXSignedDefinitions(\n  did: DID,\n  schemas: PublishedSchemas\n): Promise<SignedDefinitions> {\n  const definitions = createIDXDefinitions(schemas)\n  return await signIDXDefinitions(did, schemas.Definition, definitions)\n}\n","import CID from 'cids'\nimport type { DagJWS, DagJWSResult } from 'dids'\nimport { fromString, toString } from 'uint8arrays'\n\nimport type { EncodedDagJWS, EncodedDagJWSResult } from './types'\nimport { applyMap } from './utils'\n\nexport function decodeDagJWS({ payload, signatures, link }: EncodedDagJWS): DagJWS {\n  return { payload, signatures, link: link ? new CID(link) : undefined }\n}\n\nexport function encodeDagJWS({ payload, signatures, link }: DagJWS): EncodedDagJWS {\n  return { payload, signatures, link: link?.toString() }\n}\n\nexport function decodeDagJWSResult({ jws, linkedBlock }: EncodedDagJWSResult): DagJWSResult {\n  return { jws: decodeDagJWS(jws), linkedBlock: fromString(linkedBlock, 'base64pad') }\n}\n\nexport function encodeDagJWSResult({ jws, linkedBlock }: DagJWSResult): EncodedDagJWSResult {\n  return { jws: encodeDagJWS(jws), linkedBlock: toString(linkedBlock, 'base64pad') }\n}\n\nexport function decodeSignedMap<K extends string>(\n  data: Record<K, Array<EncodedDagJWSResult>>\n): Record<K, Array<DagJWSResult>> {\n  return applyMap(data, (records) => records.map(decodeDagJWSResult))\n}\n\nexport function encodeSignedMap<K extends string>(\n  data: Record<K, Array<DagJWSResult>>\n): Record<K, Array<EncodedDagJWSResult>> {\n  return applyMap(data, (records) => records.map(encodeDagJWSResult))\n}\n","import { decodeSignedMap } from '../encoding'\n\nimport encodedDefinitions from './definitions.json'\nimport encodedSchemas from './schemas.json'\n\nexport const signedDefinitions = decodeSignedMap(encodedDefinitions)\nexport const signedSchemas = decodeSignedMap(encodedSchemas)\n","import Ajv from 'ajv'\nimport addFormats from 'ajv-formats'\nimport SecureSchema from 'ajv/lib/refs/json-schema-secure.json'\n\nimport { Definition as DefinitionSchema } from './schemas'\nimport type { Definition, Schema } from './types'\n\nconst ajv = new Ajv({ strict: false })\naddFormats(ajv as any) // Seems there is a type mismatch with ajv-formats\n\nexport const validateDefinition = ajv.compile<Definition>(DefinitionSchema)\n\nexport function isValidDefinition(definition: unknown): boolean {\n  return validateDefinition(definition)\n}\n\nexport const validateSchemaSecure = ajv.compile<Schema>(SecureSchema)\n\nexport function isSecureSchema(schema: Schema): boolean {\n  ajv.compile(schema)\n  return validateSchemaSecure(schema)\n}\n","import type {\n  CeramicApi,\n  CeramicCommit,\n  GenesisCommit,\n  StreamMetadata,\n} from '@ceramicnetwork/common'\nimport { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { schemas as publishedSchemas } from '@ceramicstudio/idx-constants'\nimport type {\n  DefinitionName,\n  PublishedDefinitions,\n  PublishedSchemas,\n  SchemaName,\n} from '@ceramicstudio/idx-constants'\nimport isEqual from 'fast-deep-equal'\n\nimport { signedDefinitions, signedSchemas } from './signed'\nimport type {\n  Definition,\n  DefinitionDoc,\n  PublishDoc,\n  PublishedConfig,\n  SchemaDoc,\n  SignedDefinitions,\n  SignedSchemas,\n} from './types'\nimport { promiseMap, docIDToString } from './utils'\nimport { isValidDefinition, isSecureSchema } from './validate'\n\nconst PUBLISH_OPTS = { anchor: false, publish: false }\n\nexport async function createTile<T = unknown>(\n  ceramic: CeramicApi,\n  content: T,\n  metadata: Partial<StreamMetadata> = {}\n): Promise<TileDocument> {\n  if (ceramic.did == null) {\n    throw new Error('Ceramic instance is not authenticated')\n  }\n\n  if (metadata.controllers == null || metadata.controllers.length === 0) {\n    metadata.controllers = [ceramic.did.id]\n  }\n\n  const doc = await TileDocument.create(ceramic, content, metadata)\n  await ceramic.pin.add(doc.id)\n  return doc\n}\n\nexport async function publishDoc<T = unknown>(\n  ceramic: CeramicApi,\n  doc: PublishDoc<T>\n): Promise<TileDocument> {\n  if (doc.id == null) {\n    return await createTile(ceramic, doc.content, {\n      controllers: doc.controllers,\n      schema: doc.schema ? docIDToString(doc.schema) : undefined,\n    })\n  }\n\n  const loaded = await ceramic.loadStream<TileDocument>(doc.id)\n  if (!isEqual(loaded.content, doc.content)) {\n    await loaded.update(doc.content)\n  }\n  return loaded\n}\n\nexport async function createDefinition(\n  ceramic: CeramicApi,\n  definition: Definition\n): Promise<TileDocument> {\n  if (!isValidDefinition(definition)) {\n    throw new Error('Invalid definition')\n  }\n  return await createTile(ceramic, definition, { schema: publishedSchemas.Definition })\n}\n\nexport async function updateDefinition(ceramic: CeramicApi, doc: DefinitionDoc): Promise<boolean> {\n  const loaded = await ceramic.loadStream<TileDocument>(doc.id)\n  if (loaded.metadata.schema !== publishedSchemas.Definition) {\n    throw new Error('Document is not a valid Definition')\n  }\n\n  if (!isEqual(loaded.content, doc.content)) {\n    await loaded.update(doc.content)\n    return true\n  }\n  return false\n}\n\nexport async function publishCommits(\n  ceramic: CeramicApi,\n  [genesis, ...updates]: Array<CeramicCommit>\n): Promise<TileDocument<Record<string, any>>> {\n  const doc = await TileDocument.createFromGenesis<TileDocument<Record<string, any>>>(\n    ceramic,\n    genesis as GenesisCommit,\n    PUBLISH_OPTS\n  )\n  await ceramic.pin.add(doc.id)\n  for (const commit of updates) {\n    await ceramic.applyCommit(doc.id, commit, PUBLISH_OPTS)\n  }\n  return doc\n}\n\nexport async function publishSchema(ceramic: CeramicApi, doc: SchemaDoc): Promise<TileDocument> {\n  if (!isSecureSchema(doc.content)) {\n    throw new Error(`Schema ${doc.name} is not secure`)\n  }\n  return await publishDoc(ceramic, doc)\n}\n\nexport async function publishSignedMap<T extends string = string>(\n  ceramic: CeramicApi,\n  signed: Record<T, Array<CeramicCommit>>\n): Promise<Record<T, TileDocument>> {\n  return await promiseMap(signed, async (commits) => await publishCommits(ceramic, commits))\n}\n\nexport async function publishIDXSignedDefinitions(\n  ceramic: CeramicApi,\n  definitions: SignedDefinitions = signedDefinitions\n): Promise<PublishedDefinitions> {\n  const signedMap = await publishSignedMap(ceramic, definitions)\n  return Object.entries(signedMap).reduce((acc, [key, doc]) => {\n    acc[key as DefinitionName] = doc.id.toString()\n    return acc\n  }, {} as PublishedDefinitions)\n}\n\nexport async function publishIDXSignedSchemas(\n  ceramic: CeramicApi,\n  schemas: SignedSchemas = signedSchemas\n): Promise<PublishedSchemas> {\n  const signedMap = await publishSignedMap(ceramic, schemas)\n  return Object.entries(signedMap).reduce((acc, [key, doc]) => {\n    acc[key as SchemaName] = doc.commitId.toUrl()\n    return acc\n  }, {} as PublishedSchemas)\n}\n\nexport async function publishIDXConfig(ceramic: CeramicApi): Promise<PublishedConfig> {\n  const [definitions, schemas] = await Promise.all([\n    publishIDXSignedDefinitions(ceramic),\n    publishIDXSignedSchemas(ceramic),\n  ])\n  return { definitions, schemas }\n}\n","import type { CeramicApi, StreamMetadata } from '@ceramicnetwork/common'\nimport type { StreamRef } from '@ceramicnetwork/streamid'\nimport type { TileDocument } from '@ceramicnetwork/stream-tile'\nimport { camelCase, pascalCase } from 'change-case'\nimport type { DagJWSResult } from 'dids'\n\nimport { decodeSignedMap, encodeSignedMap } from './encoding'\nimport { createDefinition, createTile, publishCommits, publishSchema } from './publishing'\nimport type { Definition, EncodedDagJWSResult, Schema } from './types'\nimport { docIDToString } from './utils'\n\nexport const SCHEMA_REF_ID = 'ceramic://schemaReference'\n\nexport type CreatedDoc = {\n  id: StreamRef\n  dependencies: Array<StreamRef>\n}\n\nexport type PublishedDocSet = {\n  definitions: Record<string, string>\n  schemas: Record<string, string>\n  tiles: Record<string, string>\n}\n\nexport type DocSetData<T> = {\n  docs: Record<string, T>\n  definitions: Array<string>\n  schemas: Array<string>\n}\nexport type SignedDocSet = DocSetData<Array<DagJWSResult>>\nexport type EncodedSignedDocSet = DocSetData<Array<EncodedDagJWSResult>>\n\n// TODO: import these types from IDX GraphQL lib once published\ntype FieldCommon = { required?: boolean }\ntype FieldType =\n  | { type: 'boolean' }\n  | { type: 'integer' }\n  | { type: 'float' }\n  | { type: 'string' }\n  | { type: 'list'; name: string }\n  | { type: 'object'; name: string }\n  | { type: 'reference'; name: string }\n\ntype Field = FieldCommon & FieldType\n\ntype ObjectFields = Record<string, Field>\n\ntype DocReference = {\n  id: string\n  schema: string\n}\n\ntype GraphQLDocSetRecords = {\n  index: Record<string, DocReference>\n  lists: Record<string, string>\n  nodes: Record<string, string>\n  objects: Record<string, ObjectFields>\n  references: Record<string, Array<string>>\n  roots: Record<string, DocReference>\n}\n\ntype AddSchemaOptions = {\n  name?: string\n  prefix: string\n}\n\n// Add a JSON schema to the provided records based on its type\nfunction addSchema(\n  records: GraphQLDocSetRecords,\n  schema: Schema,\n  options: AddSchemaOptions\n): string {\n  const providedTitle = options.name ?? (schema.title as string)\n  if (providedTitle == null) {\n    throw new Error('Schema must have a title')\n  }\n\n  const title = pascalCase(providedTitle)\n  const name = title.startsWith(options.prefix) ? title : options.prefix + title\n\n  if (schema.type === 'array' && schema.items != null) {\n    records.lists[name] = addSchema(records, schema.items, { prefix: name })\n  } else if (schema.type === 'object' && schema.properties != null) {\n    if (schema.$id === SCHEMA_REF_ID) {\n      const ref = (schema.properties as Record<string, any>).schema as {\n        const?: string\n        enum?: Array<string>\n      }\n      if (ref != null) {\n        if (ref.enum != null) {\n          records.references[name] = ref.enum\n        } else if (typeof ref.const === 'string') {\n          records.references[name] = [ref.const]\n        }\n      }\n    } else {\n      const requiredProps = (schema.required as Array<string>) ?? []\n      records.objects[name] = Object.entries(schema.properties as Record<string, any>).reduce(\n        (acc, [key, value]: [string, Schema]) => {\n          const prop = camelCase(key)\n          const opts = { name: (value.title as string) ?? key, prefix: name }\n          const required = requiredProps.includes(key)\n          if (value.type === 'array') {\n            acc[prop] = { required, type: 'list', name: addSchema(records, value, opts) }\n          } else if (value.type === 'object') {\n            const type = value.$id === SCHEMA_REF_ID ? 'reference' : 'object'\n            acc[prop] = { required, type, name: addSchema(records, value, opts) }\n          } else {\n            acc[prop] = { ...value, required } as Field\n          }\n          return acc\n        },\n        {} as Record<string, Field>\n      )\n    }\n  }\n\n  return name\n}\n\n// Recursively extract references to other schemas from a JSON schema arrays and objects\nfunction extractSchemaReferences(schema: Schema): Array<string> {\n  if (schema.type === 'array') {\n    return extractSchemaReferences(schema.items)\n  }\n\n  if (schema.type === 'object' && schema.properties != null) {\n    const props = schema.properties as Record<string, Schema>\n\n    if (schema.$id === SCHEMA_REF_ID) {\n      if (props.schema == null) {\n        return []\n      }\n      if (Array.isArray(props.schema.enum)) {\n        return props.schema.enum as Array<string>\n      }\n      if (typeof props.schema.const === 'string') {\n        return [props.schema.const]\n      }\n    }\n\n    return Object.values(props).flatMap(extractSchemaReferences)\n  }\n\n  return []\n}\n\nexport class DocSet {\n  _ceramic: CeramicApi\n  _docs: Record<string, Promise<TileDocument>> = {}\n  _definitions: Record<string, Promise<CreatedDoc>> = {}\n  _schemas: Record<string, Promise<CreatedDoc>> = {}\n  _schemaAliases: Record<string, string> = {}\n  _tiles: Record<string, Promise<CreatedDoc>> = {}\n\n  constructor(ceramic: CeramicApi) {\n    if (ceramic.did == null) {\n      throw new Error('Ceramic instance must be authenticated')\n    }\n    this._ceramic = ceramic\n  }\n\n  async loadCreated(created: Promise<CreatedDoc>): Promise<TileDocument> {\n    return await this.loadDoc((await created).id)\n  }\n\n  async loadDoc(streamID: StreamRef | string): Promise<TileDocument> {\n    const id = docIDToString(streamID)\n    if (this._docs[id] == null) {\n      this._docs[id] = this._ceramic.loadStream<TileDocument>(id)\n    }\n    return await this._docs[id]\n  }\n\n  get definitions(): Array<string> {\n    return Object.keys(this._definitions)\n  }\n\n  get schemas(): Array<string> {\n    return Object.keys(this._schemas)\n  }\n\n  get tiles(): Array<string> {\n    return Object.keys(this._tiles)\n  }\n\n  hasSchema(alias: string): boolean {\n    return this._schemas[alias] != null\n  }\n\n  getSchema(alias: string): Promise<CreatedDoc> | null {\n    return this._schemas[alias] ?? null\n  }\n\n  deleteSchema(alias: string): boolean {\n    if (this.hasSchema(alias)) {\n      delete this._schemas[alias]\n      return true\n    }\n    return false\n  }\n\n  createSchema(\n    name: string,\n    schema: Schema,\n    deps: Array<Promise<StreamRef>> = []\n  ): Promise<CreatedDoc> {\n    if (this.hasSchema(name)) {\n      throw new Error(`Schema ${name} already exists`)\n    }\n\n    this._schemas[name] = Promise.all(deps).then((dependencies) => {\n      return publishSchema(this._ceramic, { name, content: schema }).then(\n        (doc) => {\n          this._schemaAliases[doc.commitId.toUrl()] = name\n          return { id: doc.commitId, dependencies }\n        },\n        (reason: any) => {\n          delete this._schemas[name]\n          throw reason\n        }\n      )\n    })\n    return this._schemas[name]\n  }\n\n  async addSchema(schema: Schema, alias?: string): Promise<StreamRef> {\n    const name = alias ?? (schema.title as string | undefined)\n    if (name == null) {\n      throw new Error('Schema must have a title property or an alias must be provided')\n    }\n\n    const schemaRefs = new Set(extractSchemaReferences(schema))\n    const deps = Array.from(schemaRefs).map(async (id) => {\n      return await this.useExistingSchema(id)\n    })\n\n    const created = await this.createSchema(name, schema, deps)\n    return created.id\n  }\n\n  async useExistingSchema(id: StreamRef | string, alias?: string): Promise<StreamRef> {\n    const existingAlias = this._schemaAliases[docIDToString(id)]\n    if (existingAlias != null) {\n      const existing = this._schemas[existingAlias]\n      if (existing == null) {\n        throw new Error(`Alias ${existingAlias} exists for this schema but no schema is attached`)\n      }\n      return (await existing).id\n    }\n\n    const doc = await this.loadDoc(id)\n    const content = (doc.content ?? {}) as Schema\n    const name = alias ?? (content.title as string | undefined)\n    if (name == null) {\n      throw new Error('Schema must have a title property or an alias must be provided')\n    }\n\n    const schemaRefs = new Set(extractSchemaReferences(content))\n    this._schemas[name] = Promise.all(\n      Array.from(schemaRefs).map(async (id) => await this.useExistingSchema(id))\n    ).then(\n      (dependencies) => {\n        this._schemaAliases[doc.commitId.toUrl()] = name\n        return { id: doc.commitId, dependencies }\n      },\n      (reason: any) => {\n        delete this._schemas[name]\n        throw reason\n      }\n    )\n\n    return doc.commitId\n  }\n\n  hasDefinition(alias: string): boolean {\n    return this._definitions[alias] != null\n  }\n\n  getDefinition(alias: string): Promise<CreatedDoc> | null {\n    return this._definitions[alias] ?? null\n  }\n\n  deleteDefinition(alias: string): boolean {\n    if (this.hasDefinition(alias)) {\n      delete this._definitions[alias]\n      return true\n    }\n    return false\n  }\n\n  createDefinition(\n    alias: string,\n    definition: Definition,\n    deps: Array<Promise<StreamRef>> = []\n  ): Promise<CreatedDoc> {\n    if (this.hasDefinition(alias)) {\n      throw new Error(`Definition ${alias} already exists`)\n    }\n\n    this._definitions[alias] = Promise.all(deps).then((dependencies) => {\n      return createDefinition(this._ceramic, definition).then(\n        (doc) => ({ id: doc.id, dependencies }),\n        (reason: any) => {\n          delete this._definitions[alias]\n          throw reason\n        }\n      )\n    })\n    return this._definitions[alias]\n  }\n\n  async addDefinition(definition: Definition, alias = definition.name): Promise<StreamRef> {\n    const created = await this.createDefinition(alias, definition, [\n      this.useExistingSchema(definition.schema),\n    ])\n    return created.id\n  }\n\n  hasTile(alias: string): boolean {\n    return this._tiles[alias] != null\n  }\n\n  getTile(alias: string): Promise<CreatedDoc> | null {\n    return this._tiles[alias] ?? null\n  }\n\n  deleteTile(alias: string): boolean {\n    if (this.hasTile(alias)) {\n      delete this._tiles[alias]\n      return true\n    }\n    return false\n  }\n\n  createTile<T extends Record<string, unknown>>(\n    alias: string,\n    contents: T,\n    meta: Partial<StreamMetadata>,\n    deps: Array<Promise<StreamRef>> = []\n  ): Promise<CreatedDoc> {\n    if (this.hasTile(alias)) {\n      throw new Error(`Tile ${alias} already exists`)\n    }\n\n    this._tiles[alias] = Promise.all(deps).then((dependencies) => {\n      return createTile(this._ceramic, contents, meta).then(\n        (doc) => ({ id: doc.id, dependencies }),\n        (reason: any) => {\n          delete this._tiles[alias]\n          throw reason\n        }\n      )\n    })\n    return this._tiles[alias]\n  }\n\n  async addTile<T extends Record<string, unknown>>(\n    alias: string,\n    contents: T,\n    meta: Partial<StreamMetadata>\n  ): Promise<StreamRef> {\n    if (meta.schema == null) {\n      throw new Error('Missing schema to add tile')\n    }\n    const created = await this.createTile(alias, contents, meta, [\n      this.useExistingSchema(meta.schema),\n    ])\n    return created.id\n  }\n\n  // Export to maps of aliases to published doc IDs/URLs\n  async toPublished(): Promise<PublishedDocSet> {\n    const definitions: Record<string, string> = {}\n    const schemas: Record<string, string> = {}\n    const tiles: Record<string, string> = {}\n\n    const handleDefinitions = Object.entries(this._definitions).map(async ([alias, created]) => {\n      const { id } = await created\n      definitions[alias] = id.toString()\n    })\n    const handleSchemas = Object.entries(this._schemas).map(async ([alias, created]) => {\n      const { id } = await created\n      schemas[alias] = id.toUrl()\n    })\n    const handleTiles = Object.entries(this._tiles).map(async ([alias, created]) => {\n      const { id } = await created\n      tiles[alias] = id.toString()\n    })\n    await Promise.all([...handleDefinitions, ...handleSchemas, ...handleTiles])\n\n    return { definitions, schemas, tiles }\n  }\n\n  // Export to maps of aliases to signed commits, would allow to publish a docset on a Ceramic node\n  async toSigned(): Promise<SignedDocSet> {\n    const deps = new Set<string>()\n    const docs: Record<string, Array<DagJWSResult>> = {}\n    const definitions: Array<string> = []\n    const schemas: Array<string> = []\n\n    const addDoc = async (created: Promise<CreatedDoc>) => {\n      const { id, dependencies } = await created\n      dependencies.forEach((depid) => {\n        deps.add(depid.toString())\n      })\n      const streamid = id.baseID\n      const commits = await this._ceramic.loadStreamCommits(streamid)\n      docs[id.toString()] = commits.map((r) => r.value as DagJWSResult)\n    }\n\n    const handleDefinitions = Object.entries(this._definitions).map(async ([alias, created]) => {\n      definitions.push(alias)\n      return await addDoc(created)\n    })\n    const handleSchemas = Object.entries(this._schemas).map(async ([alias, created]) => {\n      schemas.push(alias)\n      await addDoc(created)\n    })\n    const handleTiles = Object.values(this._tiles).map(addDoc)\n    await Promise.all([...handleDefinitions, ...handleSchemas, ...handleTiles])\n\n    deps.forEach((id) => {\n      if (docs[id] == null) {\n        throw new Error(`Missing dependency: ${id}`)\n      }\n    })\n\n    return { docs, definitions, schemas }\n  }\n\n  // Export signed commits to JSON\n  async toSignedJSON(): Promise<EncodedSignedDocSet> {\n    const { docs, ...signed } = await this.toSigned()\n    return { ...signed, docs: encodeSignedMap(docs) }\n  }\n\n  // Export to GraphQL docset records for conversion to GraphQL schema\n  async toGraphQLDocSetRecords(): Promise<GraphQLDocSetRecords> {\n    // TODO: throw error on using reserved names:\n    // - \"node\" and \"index\" roots\n    // - \"id\" field in object if node\n\n    const records: GraphQLDocSetRecords = {\n      index: {},\n      lists: {},\n      nodes: {},\n      objects: {},\n      references: {},\n      roots: {},\n    }\n\n    const handleSchemas = this.schemas.map(async (name) => {\n      const created = this.getSchema(name)\n      if (created != null) {\n        const doc = await this.loadCreated(created)\n        const schema = doc.content as Schema\n        if (schema == null) {\n          throw new Error(`Could not load schema ${name}`)\n        }\n        records.nodes[doc.commitId.toUrl()] = addSchema(records, schema, { prefix: '' })\n      }\n    })\n\n    const handleDefinitions = this.definitions.map(async (name) => {\n      const created = this.getDefinition(name)\n      if (created != null) {\n        const doc = await this.loadCreated(created)\n        const definition = doc.content as Definition\n        if (definition == null) {\n          throw new Error(`Could not load definition ${name}`)\n        }\n        records.index[name] = { id: doc.id.toString(), schema: definition.schema }\n      }\n    })\n\n    const handleTiles = this.tiles.map(async (name) => {\n      const created = this.getTile(name)\n      if (created != null) {\n        const doc = await this.loadCreated(created)\n        const { schema } = doc.metadata\n        if (schema == null) {\n          throw new Error(`Missing schema for tile ${name}`)\n        }\n        records.roots[name] = { id: doc.id.toString(), schema }\n      }\n    })\n\n    await Promise.all([...handleSchemas, ...handleDefinitions, ...handleTiles])\n\n    return records\n  }\n}\n\n// Publish a signed docset to the given Ceramic node\nexport async function publishSignedDocSet(\n  ceramic: CeramicApi,\n  docSet: SignedDocSet\n): Promise<void> {\n  const schemas: Array<Promise<TileDocument>> = []\n  const others: Array<Promise<TileDocument>> = []\n\n  Object.entries(docSet.docs).forEach(([id, commits]) => {\n    const publish = publishCommits(ceramic, commits)\n    if (docSet.schemas.includes(id)) {\n      schemas.push(publish)\n    } else {\n      others.push(publish)\n    }\n  })\n\n  await Promise.all(schemas)\n  await Promise.all(others)\n}\n\n// Publish a JSON-encoded signed docset to the given Ceramic node\nexport async function publishEncodedSignedDocSet(\n  ceramic: CeramicApi,\n  { docs, ...docSet }: EncodedSignedDocSet\n): Promise<void> {\n  return await publishSignedDocSet(ceramic, { ...docSet, docs: decodeSignedMap(docs) })\n}\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","docIDToString","id","applyMap","inputs","callFunc","entries","reduce","acc","promiseMap","all","map","results","signTile","did","data","schema","authenticated","header","controllers","createDagJWS","doctype","signIDXDefinitions","definitionSchema","definitions","definition","schemas","createIDXDefinitions","alsoKnownAs","description","AlsoKnownAs","basicProfile","BasicProfile","cryptoAccounts","CryptoAccounts","threeIdKeychain","ThreeIdKeychain","Definition","decodeDagJWS","link","payload","signatures","CID","encodeDagJWS","decodeDagJWSResult","linkedBlock","jws","fromString","encodeDagJWSResult","decodeSignedMap","records","encodeSignedMap","signedDefinitions","signedSchemas","encodedSchemas","ajv","Ajv","strict","addFormats","validateDefinition","compile","DefinitionSchema","isValidDefinition","validateSchemaSecure","SecureSchema","isSecureSchema","PUBLISH_OPTS","anchor","publish","createTile","ceramic","content","metadata","TileDocument","doc","pin","add","publishDoc","loadStream","isEqual","loaded","update","createDefinition","publishedSchemas","publishCommits","genesis","updates","createFromGenesis","commit","applyCommit","publishSchema","publishSignedMap","signed","commits","publishIDXSignedDefinitions","publishIDXSignedSchemas","commitId","toUrl","SCHEMA_REF_ID","addSchema","options","providedTitle","title","pascalCase","startsWith","prefix","items","lists","properties","$id","ref","references","requiredProps","required","objects","prop","camelCase","opts","includes","extractSchemaReferences","props","Array","isArray","flatMap","publishSignedDocSet","docSet","others","docs","_ceramic","loadCreated","created","loadDoc","streamID","_docs","hasSchema","alias","_schemas","getSchema","deleteSchema","createSchema","deps","dependencies","_this","_schemaAliases","reason","schemaRefs","Set","from","_this2","useExistingSchema","existingAlias","existing","_this3","hasDefinition","_definitions","getDefinition","deleteDefinition","_this4","addDefinition","hasTile","_tiles","getTile","deleteTile","contents","meta","_this5","addTile","toPublished","tiles","handleDefinitions","handleSchemas","handleTiles","toSigned","addDoc","depid","streamid","baseID","_this6","loadStreamCommits","r","toSignedJSON","toGraphQLDocSetRecords","index","nodes","roots","_this7"],"mappings":"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"}