import type { CeramicApi, CeramicCommit, StreamMetadata } from '@ceramicnetwork/common';
import { TileDocument } from '@ceramicnetwork/stream-tile';
import type { PublishedDefinitions, PublishedSchemas } from '@ceramicstudio/idx-constants';
import type { Definition, DefinitionDoc, PublishDoc, PublishedConfig, SchemaDoc, SignedDefinitions, SignedSchemas } from './types';
export declare function createTile<T = unknown>(ceramic: CeramicApi, content: T, metadata?: Partial<StreamMetadata>): Promise<TileDocument>;
export declare function publishDoc<T = unknown>(ceramic: CeramicApi, doc: PublishDoc<T>): Promise<TileDocument>;
export declare function createDefinition(ceramic: CeramicApi, definition: Definition): Promise<TileDocument>;
export declare function updateDefinition(ceramic: CeramicApi, doc: DefinitionDoc): Promise<boolean>;
export declare function publishCommits(ceramic: CeramicApi, [genesis, ...updates]: Array<CeramicCommit>): Promise<TileDocument<Record<string, any>>>;
export declare function publishSchema(ceramic: CeramicApi, doc: SchemaDoc): Promise<TileDocument>;
export declare function publishSignedMap<T extends string = string>(ceramic: CeramicApi, signed: Record<T, Array<CeramicCommit>>): Promise<Record<T, TileDocument>>;
export declare function publishIDXSignedDefinitions(ceramic: CeramicApi, definitions?: SignedDefinitions): Promise<PublishedDefinitions>;
export declare function publishIDXSignedSchemas(ceramic: CeramicApi, schemas?: SignedSchemas): Promise<PublishedSchemas>;
export declare function publishIDXConfig(ceramic: CeramicApi): Promise<PublishedConfig>;
