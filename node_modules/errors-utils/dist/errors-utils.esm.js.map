{"version":3,"file":"errors-utils.esm.js","sources":["../src/index.ts"],"sourcesContent":["export type StackErrorJSON = {\n  code: string\n  message: string\n  metadata: Record<string, unknown>\n  name: string\n  stack: Array<StackErrorJSON>\n}\n\nexport class StackError extends Error {\n  static from(error: Error, code = 'SE0'): StackError {\n    if (error instanceof StackError) {\n      return error\n    }\n    const se = new StackError(code, error.message)\n    se.stack = error.stack\n    return se\n  }\n\n  static fromJSON(json: StackErrorJSON): StackError {\n    const error = new StackError(json.code, json.message)\n    error.errorStack = (json.stack ?? []).reduceRight((stack, e) => {\n      const err = StackError.fromJSON(e)\n      err.errorStack = stack\n      return [err, ...stack]\n    }, [] as Array<StackError>)\n    error.metadata = json.metadata ?? {}\n    error.name = json.name ?? 'StackError'\n    return error\n  }\n\n  code: string\n  errorStack: Array<StackError>\n  metadata: Record<string, unknown> = {}\n  name = 'StackError'\n\n  constructor(code: string, message: string, wrapError?: Error) {\n    super(message)\n    Object.setPrototypeOf(this, StackError.prototype)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StackError)\n    }\n\n    this.code = code\n    this.errorStack = wrapError ? StackError.from(wrapError).toErrorStack() : []\n  }\n\n  toErrorStack(): Array<StackError> {\n    return [this, ...this.errorStack]\n  }\n\n  toJSON(withStack = true): StackErrorJSON {\n    return {\n      code: this.code,\n      message: this.message,\n      metadata: this.metadata,\n      name: this.name,\n      stack: withStack ? this.errorStack.map(e => e.toJSON(false)) : []\n    }\n  }\n\n  toString(): string {\n    return `[${this.code}] ${this.message}`\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createNamespaceError(namespace: string, metadata: Record<string, unknown> = {}) {\n  return class NamespaceError extends StackError {\n    constructor(code: string | number, message: string, wrapError?: Error) {\n      super(`${namespace}${code}`, message, wrapError)\n      Object.setPrototypeOf(this, NamespaceError.prototype)\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, NamespaceError)\n      }\n\n      this.metadata = metadata\n    }\n  }\n}\n\nexport function assert(condition: boolean, message = 'Assertion failed'): asserts condition {\n  if (!condition) {\n    throw new Error(message)\n  }\n}\n\nexport function assertAs<T extends typeof StackError>(\n  condition: boolean,\n  ErrorClass: T,\n  ...args: ConstructorParameters<T>\n): asserts condition {\n  if (!condition) {\n    // @ts-ignore args\n    throw new ErrorClass(...args)\n  }\n}\n"],"names":["StackError","code","message","wrapError","Object","setPrototypeOf","prototype","Error","captureStackTrace","errorStack","from","toErrorStack","error","se","stack","fromJSON","json","reduceRight","e","err","metadata","name","toJSON","withStack","map","toString","createNamespaceError","namespace","NamespaceError","assert","condition","assertAs","ErrorClass","args"],"mappings":"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"}