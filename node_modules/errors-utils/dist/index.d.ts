/// <reference types="node" />
export declare type StackErrorJSON = {
    code: string;
    message: string;
    metadata: Record<string, unknown>;
    name: string;
    stack: Array<StackErrorJSON>;
};
export declare class StackError extends Error {
    static from(error: Error, code?: string): StackError;
    static fromJSON(json: StackErrorJSON): StackError;
    code: string;
    errorStack: Array<StackError>;
    metadata: Record<string, unknown>;
    name: string;
    constructor(code: string, message: string, wrapError?: Error);
    toErrorStack(): Array<StackError>;
    toJSON(withStack?: boolean): StackErrorJSON;
    toString(): string;
}
export declare function createNamespaceError(namespace: string, metadata?: Record<string, unknown>): {
    new (code: string | number, message: string, wrapError?: Error | undefined): {
        code: string;
        errorStack: StackError[];
        metadata: Record<string, unknown>;
        name: string;
        toErrorStack(): StackError[];
        toJSON(withStack?: boolean): StackErrorJSON;
        toString(): string;
        message: string;
        stack?: string | undefined;
    };
    from(error: Error, code?: string): StackError;
    fromJSON(json: StackErrorJSON): StackError;
    captureStackTrace(targetObject: object, constructorOpt?: Function | undefined): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare function assert(condition: boolean, message?: string): asserts condition;
export declare function assertAs<T extends typeof StackError>(condition: boolean, ErrorClass: T, ...args: ConstructorParameters<T>): asserts condition;
