'use strict';

var util = require('util');
var Duplexify = require('duplexify');

module.exports = Connection;

util.inherits(Connection, Duplexify);

function Connection(conn) {
  var _this = this;

  if (!(this instanceof Connection)) {
    return new Connection(conn);
  }

  Duplexify.call(this);

  var peerInfo = void 0;

  this.getPeerInfo = function (callback) {
    if (conn && conn.getPeerInfo) {
      return conn.getPeerInfo(callback);
    }

    if (!peerInfo) {
      return callback(new Error('Peer Info not set yet'));
    }

    callback(null, peerInfo);
  };

  this.setPeerInfo = function (_peerInfo) {
    if (conn && conn.setPeerInfo) {
      return conn.setPeerInfo(_peerInfo);
    }
    peerInfo = _peerInfo;
  };

  this.getObservedAddrs = function (callback) {
    if (conn && conn.getObservedAddrs) {
      return conn.getObservedAddrs(callback);
    }
    callback(null, []);
  };

  this.setInnerConn = function (_conn) {
    conn = _conn;
    _this.setReadable(conn);
    _this.setWritable(conn);
  };

  // .destroy is implemented by Duplexify

  if (conn) {
    this.setInnerConn(conn);
  }
}