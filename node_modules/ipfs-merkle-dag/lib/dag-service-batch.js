'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Block = require('ipfs-block');

// Batch is to defer writes
module.exports = function () {
  function Batch(ds, max) {
    _classCallCheck(this, Batch);

    if (!ds) {
      throw Error('Invalid DAG Service');
    }

    this.dagService = ds;
    this.blocks = [];
    this.size = 0;
    this.maxSize = max || 0;
  }

  _createClass(Batch, [{
    key: 'add',
    value: function add(node, cb) {
      if (!node) {
        return cb('Node is invalid');
      }

      var data = node.encoded();

      if (!data) {
        return cb('Node is unencoded');
      }

      this.size += data.length;
      var block = new Block(data);
      this.blocks.push(block);

      if (this.size > this.maxSize) {
        this.commit(cb, block.key);
      } else {
        cb(null, block.key);
      }
    }
  }, {
    key: 'commit',
    value: function commit(cb, key) {
      var _this = this;

      this.dagService.blocks().addBlocks(this.blocks, function (err) {
        if (err) {
          return cb(err);
        }

        _this.blocks = [];
        _this.size = 0;
        cb(null, key);
      });
    }
  }]);

  return Batch;
}();