'use strict';

var debug = require('debug');
var log = debug('unixfs');
log.err = debug('unixfs:error');
var isIPFS = require('is-ipfs');
var UnixFS = require('ipfs-unixfs');
var series = require('run-series');
var Readable = require('readable-stream').Readable;
var pathj = require('path');
var util = require('util');
var fieldtrip = require('field-trip');
var cleanMultihash = require('./clean-multihash');

exports = module.exports = Exporter;

util.inherits(Exporter, Readable);

function Exporter(hash, dagService, options) {
  var _this = this;

  if (!(this instanceof Exporter)) {
    return new Exporter(hash, dagService, options);
  }

  // Sanitize hash
  if (!isIPFS.multihash(hash)) {
    throw new Error('not valid multihash');
  }
  hash = cleanMultihash(hash);

  Readable.call(this, { objectMode: true });

  this.options = options || {};

  this._read = function (n) {};

  var fileExporter = function fileExporter(node, name, done) {
    if (!done) {
      throw new Error('done must be set');
    }

    var contentRS = new Readable();
    contentRS._read = function () {};

    // Logic to export a single (possibly chunked) unixfs file.
    if (node.links.length === 0) {
      var unmarshaledData = UnixFS.unmarshal(node.data);
      contentRS.push(unmarshaledData.data);
      contentRS.push(null);
      _this.push({ content: contentRS, path: name });
      done();
    } else {
      var array = node.links.map(function (link) {
        return function (cb) {
          dagService.get(link.hash, function (err, res) {
            if (err) {
              return cb(err);
            }
            var unmarshaledData = UnixFS.unmarshal(res.data);
            contentRS.push(unmarshaledData.data);
            cb();
          });
        };
      });
      series(array, function (err) {
        if (err) {
          return contentRS.emit('error', err);
        }
        contentRS.push(null);
      });
      _this.push({ content: contentRS, path: name });
      done();
    }
  };

  // Logic to export a unixfs directory.
  var dirExporter = function dirExporter(node, name, add, done) {
    if (!add) {
      throw new Error('add must be set');
    }
    if (!done) {
      throw new Error('done must be set');
    }

    _this.push({ content: null, path: name });

    // Directory has links
    if (node.links.length > 0) {
      node.links.forEach(function (link) {
        add({ path: pathj.join(name, link.name), hash: link.hash });
      });
    }
    done();
  };

  // Traverse the DAG asynchronously
  fieldtrip([{ path: hash, hash: hash }], visit.bind(this), function (err) {
    if (err) {
      return _this.emit('error', err);
    }
    _this.push(null);
  });

  // Visit function: called once per node in the exported graph
  function visit(item, add, done) {
    var _this2 = this;

    dagService.get(item.hash, function (err, node) {
      if (err) {
        return _this2.emit('error', err);
      }

      var data = UnixFS.unmarshal(node.data);
      var type = data.type;

      if (type === 'directory') {
        dirExporter(node, item.path, add, done);
      }

      if (type === 'file') {
        fileExporter(node, item.path, done);
      }
    });
  }

  return this;
}