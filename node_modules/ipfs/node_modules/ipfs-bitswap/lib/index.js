'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var async = require('async');
var debug = require('debug');
var log = debug('bitswap');
log.error = debug('bitswap:error');
var EventEmitter = require('events').EventEmitter;
var mh = require('multihashes');

var cs = require('./constants');
var WantManager = require('./wantmanager');
var Network = require('./network');
var decision = require('./decision');

module.exports = function () {
  function Bitwap(p, libp2p, datastore, peerBook) {
    _classCallCheck(this, Bitwap);

    // the ID of the peer to act on behalf of
    this.self = p;

    // the network delivers messages
    this.network = new Network(libp2p, peerBook, this);

    // local database
    this.datastore = datastore;

    this.engine = new decision.Engine(datastore, this.network);

    // handle message sending
    this.wm = new WantManager(this.network);

    this.blocksRecvd = 0;
    this.dupBlocksRecvd = 0;
    this.dupDataRecvd = 0;

    this.notifications = new EventEmitter();
    this.notifications.setMaxListeners(cs.maxListeners);
  }

  // handle messages received through the network


  _createClass(Bitwap, [{
    key: '_receiveMessage',
    value: function _receiveMessage(peerId, incoming, cb) {
      var _this = this;

      cb = cb || function () {};
      log('receiving message from %s', peerId.toB58String());
      this.engine.messageReceived(peerId, incoming, function (err) {
        if (err) {
          log('failed to receive message', incoming);
        }

        var iblocks = incoming.blocks;

        if (iblocks.size === 0) {
          return cb();
        }

        // quickly send out cancels, reduces chances of duplicate block receives
        var keys = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = iblocks.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var block = _step.value;

            var found = _this.wm.wl.contains(block.key);
            if (!found) {
              log('received un-askes-for %s from %s', mh.toB58String(block.key), peerId.toB58String());
            } else {
              keys.push(block.key);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        _this.wm.cancelWants(keys);

        async.eachLimit(iblocks.values(), 10, function (block, next) {
          async.series([function (innerCb) {
            return _this._updateReceiveCounters(block, function (err) {
              if (err) {
                // ignore, as these have been handled in _updateReceiveCounters
                return innerCb();
              }

              log('got block from %s', peerId.toB58String(), block.data.toString());
              innerCb();
            });
          }, function (innerCb) {
            return _this.hasBlock(block, function (err) {
              if (err) {
                log.error('receiveMessage hasBlock error: %s', err.message);
              }
              innerCb();
            });
          }], next);
        }, cb);
      });
    }
  }, {
    key: '_updateReceiveCounters',
    value: function _updateReceiveCounters(block, cb) {
      var _this2 = this;

      this.blocksRecvd++;
      this.datastore.has(block.key, function (err, has) {
        if (err) {
          log('datastore.has error: %s', err.message);
          return cb(err);
        }

        if (has) {
          _this2.dupBlocksRecvd++;
          _this2.dupDataRecvd += block.data.length;
          return cb(new Error('Already have block'));
        }

        cb();
      });
    }
  }, {
    key: '_tryPutBlock',
    value: function _tryPutBlock(block, times, cb) {
      var _this3 = this;

      log('trying to put block %s', block.data.toString());
      async.retry({ times: times, interval: 400 }, function (done) {
        _this3.datastore.put(block, done);
      }, cb);
    }

    // handle errors on the receiving channel

  }, {
    key: '_receiveError',
    value: function _receiveError(err) {
      log.error('ReceiveError: %s', err.message);
    }

    // handle new peers

  }, {
    key: '_onPeerConnected',
    value: function _onPeerConnected(peerId) {
      this.wm.connected(peerId);
    }

    // handle peers being disconnected

  }, {
    key: '_onPeerDisconnected',
    value: function _onPeerDisconnected(peerId) {
      this.wm.disconnected(peerId);
      this.engine.peerDisconnected(peerId);
    }

    // getBlock attempts to retrieve a particular block with key `key` from peers

  }, {
    key: 'getBlock',
    value: function getBlock(key, cb) {
      var keyS = mh.toB58String(key);
      log('getBlock.start %s', keyS);
      var done = function done(err, block) {
        if (err) {
          log('getBlock.fail %s', keyS);
          return cb(err);
        }

        if (!block) {
          log('getBlock.fail %s', keyS);
          return cb(new Error('Empty block received'));
        }

        log('getBlock.end %s', keyS);
        cb(null, block);
      };

      this.getBlocks([key], function (results) {
        var err = results[keyS].error;
        var block = results[keyS].block;

        done(err, block);
      });
    }

    // return the current wantlist for a given `peerId`

  }, {
    key: 'wantlistForPeer',
    value: function wantlistForPeer(peerId) {
      return this.engine.wantlistForPeer(peerId);
    }
  }, {
    key: 'getBlocks',
    value: function getBlocks(keys, cb) {
      var _this4 = this;

      var results = {};
      var unwantListeners = {};
      var blockListeners = {};
      var unwantEvent = function unwantEvent(key) {
        return 'unwant:' + key;
      };
      var blockEvent = function blockEvent(key) {
        return 'block:' + key;
      };

      var cleanupListeners = function cleanupListeners() {
        keys.forEach(function (key) {
          var keyS = mh.toB58String(key);
          _this4.notifications.removeListener(unwantEvent(keyS), unwantListeners[keyS]);
          _this4.notifications.removeListener(blockEvent(keyS), blockListeners[keyS]);
        });
      };

      var addListeners = function addListeners() {
        keys.forEach(function (key) {
          var keyS = mh.toB58String(key);
          unwantListeners[keyS] = function () {
            finish(keyS, new Error('manual unwant: ' + keyS));
          };

          blockListeners[keyS] = function (block) {
            finish(keyS, null, block);
          };

          _this4.notifications.once(unwantEvent(keyS), unwantListeners[keyS]);
          _this4.notifications.once(blockEvent(keyS), blockListeners[keyS]);
        });
      };

      var finished = false;
      var finish = function finish(key, err, block) {
        results[key] = {
          error: err,
          block: block
        };

        if (Object.keys(results).length === keys.length) {
          cleanupListeners();

          if (!finished) {
            cb(results);
          }
          finished = true;
        }
      };

      addListeners();
      this.wm.wantBlocks(keys);

      async.parallel(keys.map(function (key) {
        return function (cb) {
          // We don't want to announce looking for blocks
          // when we might have them ourselves.
          _this4.datastore.has(key, function (err, exists) {
            if (err) {
              log('error in datastore.has: ', err.message);
              return cb();
            }

            if (!exists) {
              return cb();
            }

            _this4.datastore.get(key, function (err, res) {
              if (err) {
                log('error in datastore.get: ', err.message);
              }

              if (!err && res) {
                finish(mh.toB58String(key), null, res);
                _this4.wm.cancelWants([key]);
              }

              cb();
            });
          });
        };
      }));
    }

    // removes the given keys from the want list independent of any ref counts

  }, {
    key: 'unwantBlocks',
    value: function unwantBlocks(keys) {
      var _this5 = this;

      this.wm.unwantBlocks(keys);
      keys.forEach(function (key) {
        _this5.notifications.emit('unwant:' + mh.toB58String(key));
      });
    }

    // removes the given keys from the want list

  }, {
    key: 'cancelWants',
    value: function cancelWants(keys) {
      this.wm.cancelWants(keys);
    }

    // announces the existance of a block to this service

  }, {
    key: 'hasBlock',
    value: function hasBlock(block, cb) {
      var _this6 = this;

      cb = cb || function () {};

      this._tryPutBlock(block, 4, function (err) {
        if (err) {
          log.error('Error writing block to datastore: %s', err.message);
          return cb(err);
        }
        log('put block: %s', mh.toB58String(block.key));
        _this6.notifications.emit('block:' + mh.toB58String(block.key), block);
        _this6.engine.receivedBlock(block);
        cb();
      });
    }
  }, {
    key: 'getWantlist',
    value: function getWantlist() {
      return this.wm.wl.entries();
    }
  }, {
    key: 'stat',
    value: function stat() {
      return {
        wantlist: this.getWantlist(),
        blocksReceived: this.blocksRecvd,
        dupBlksReceived: this.dupBlocksRecvd,
        dupDataReceived: this.dupDataRecvd,
        peers: this.engine.peers()
      };
    }
  }, {
    key: 'start',
    value: function start() {
      this.wm.run();
      this.network.start();
      this.engine.start();
    }

    // Halt everything

  }, {
    key: 'stop',
    value: function stop() {
      this.wm.stop();
      this.network.stop();
      this.engine.stop();
    }
  }]);

  return Bitwap;
}();