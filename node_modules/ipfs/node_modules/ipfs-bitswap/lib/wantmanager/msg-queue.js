'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = require('debug');
var async = require('async');

var Message = require('../message');

var log = debug('bitswap:wantmanager:queue');
log.error = debug('bitswap:wantmanager:queue:error');

module.exports = function () {
  function MsgQueue(peerId, network) {
    _classCallCheck(this, MsgQueue);

    this.p = peerId;
    this.network = network;
    this.refcnt = 1;

    this.queue = async.queue(this.doWork.bind(this), 1);
    // only start when `run` is called
    this.queue.pause();
  }

  _createClass(MsgQueue, [{
    key: 'addMessage',
    value: function addMessage(msg) {
      log('addMessage: %s', this.p.toB58String());
      this.queue.push(msg);
    }
  }, {
    key: 'addEntries',
    value: function addEntries(entries, full) {
      log('addEntries: %s', entries.length);
      var msg = new Message(Boolean(full));
      entries.forEach(function (entry) {
        if (entry.cancel) {
          msg.cancel(entry.key);
        } else {
          msg.addEntry(entry.key, entry.priority);
        }
      });

      this.addMessage(msg);
    }
  }, {
    key: 'doWork',
    value: function doWork(wlm, cb) {
      var _this = this;

      log('doWork: %s', this.p.toB58String());
      this.network.connectTo(this.p, function (err) {
        if (err) {
          log.error('cant connect to peer %s: %s', _this.p.toB58String(), err.message);
          return cb();
        }

        _this.network.sendMessage(_this.p, wlm, function (err) {
          if (err) {
            log.error('send error: %s', err.message);
          }

          cb();
        });
      });
    }
  }, {
    key: 'run',
    value: function run() {
      this.queue.resume();
    }
  }, {
    key: 'stop',
    value: function stop() {
      var _this2 = this;

      var done = function done() {
        _this2.queue.kill();
        _this2.queue.pause();
      };

      // Give the queue up to 1s time to finish things
      this.queue.drain = done;
      setTimeout(done, 1000);
    }
  }]);

  return MsgQueue;
}();