'use strict';

var stores = require('./stores');

function Repo(repoPath, options) {
  var _this = this;

  if (!(this instanceof Repo)) {
    return new Repo(repoPath, options);
  }
  if (!options) {
    throw new Error('missing options param');
  }
  if (!options.stores) {
    throw new Error('missing options.stores param');
  }

  // If options.stores is an abstract-blob-store instead of a map, use it for
  // all stores.
  if (options.stores.prototype && options.stores.prototype.createWriteStream) {
    var store = options.stores;
    options.stores = {
      keys: store,
      config: store,
      datastore: store,
      logs: store,
      locks: store,
      version: store
    };
  }

  this.path = repoPath;

  this.locks = stores.locks.setUp(repoPath, options.stores.locks);

  this.exists = function (callback) {
    _this.version.exists(callback);
  };

  this.version = stores.version.setUp(repoPath, options.stores.version, this.locks);

  this.config = stores.config.setUp(repoPath, options.stores.config, this.locks);

  this.keys = stores.keys.setUp(repoPath, options.stores.keys, this.locks, this.config);

  this.datastore = stores.datastore.setUp(repoPath, options.stores.datastore, this.locks);
}

exports = module.exports = Repo;