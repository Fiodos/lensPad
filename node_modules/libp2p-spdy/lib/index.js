'use strict';

var spdy = require('spdy-transport');
var Connection = require('interface-connection').Connection;
var EE = require('events').EventEmitter;

exports = module.exports = function (conn, isListener) {
  var muxer = spdy.connection.create(conn, {
    protocol: 'spdy',
    isServer: isListener
  });

  var proxyMuxer = new EE();

  muxer.start(3.1);

  // method added to enable pure stream muxer feeling
  proxyMuxer.newStream = function (callback) {
    if (!callback) {
      callback = noop;
    }

    var muxedConn = new Connection(muxer.request({
      method: 'POST',
      path: '/',
      headers: {}
    }, callback));

    if (conn.getObservedAddrs) {
      muxedConn.getObservedAddrs = conn.getObservedAddrs.bind(conn);
      muxedConn.getPeerInfo = conn.getPeerInfo.bind(conn);
      muxedConn.setPeerInfo = conn.setPeerInfo.bind(conn);
    }

    return muxedConn;
  };

  // The rest of the API comes by default with SPDY
  muxer.on('close', function () {
    proxyMuxer.emit('close');
  });

  muxer.on('error', function (err) {
    proxyMuxer.emit('error', err);
  });

  proxyMuxer.end = function (cb) {
    muxer.end(cb);
  };

  // needed by other spdy impl that need the response headers
  // in order to confirm the stream can be open
  muxer.on('stream', function (stream) {
    stream.respond(200, {});
    var muxedConn = new Connection(stream);
    if (conn.getObservedAddrs) {
      muxedConn.getObservedAddrs = conn.getObservedAddrs.bind(conn);
      muxedConn.getPeerInfo = conn.getPeerInfo.bind(conn);
      muxedConn.setPeerInfo = conn.setPeerInfo.bind(conn);
    }
    proxyMuxer.emit('stream', muxedConn);
  });

  proxyMuxer.multicodec = exports.multicodec;
  return proxyMuxer;
};

exports.multicodec = '/spdy/3.1.0';

function noop() {}