"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const signing_1 = __importDefault(require("./signing"));
const encryption_1 = __importDefault(require("./encryption"));
const borc_1 = __importDefault(require("borc"));
function stringToJose(jose) {
    const split = jose.split('.');
    if (split.length === 3) {
        return signing_1.default.encode(signing_1.default.fromSplit(split));
    }
    else if (split.length === 5) {
        return encryption_1.default.encode(encryption_1.default.fromSplit(split));
    }
    else {
        throw new Error('Not a valid JOSE string');
    }
}
const name = 'dag-jose';
const code = 133;
function isJWS(jose) {
    return 'payload' in jose;
}
function isJWE(jose) {
    return 'ciphertext' in jose;
}
function encode(obj) {
    let encodedJose;
    if (typeof obj === 'string') {
        encodedJose = stringToJose(obj);
    }
    else if (isJWS(obj)) {
        encodedJose = signing_1.default.encode(obj);
    }
    else if (isJWE(obj)) {
        encodedJose = encryption_1.default.encode(obj);
    }
    else {
        throw new Error('Not a valid JOSE object');
    }
    return new Uint8Array(borc_1.default.encode(encodedJose));
}
function decode(data) {
    let encoded;
    try {
        encoded = borc_1.default.decode(data);
    }
    catch (e) {
        throw new Error('Not a valid DAG-JOSE object');
    }
    if (isJWS(encoded)) {
        return signing_1.default.decode(encoded);
    }
    else if (isJWE(encoded)) {
        return encryption_1.default.decode(encoded);
    }
    else {
        throw new Error('Not a valid DAG-JOSE object');
    }
}
exports.default = {
    name,
    code,
    encode,
    decode,
};
//# sourceMappingURL=index.js.map