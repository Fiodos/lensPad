'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expose;
function expose(funcName, func, opts) {
  opts = opts || {};

  var addListener = opts.addListener || window.addEventListener;
  var removeListener = opts.removeListener || window.removeEventListener;
  var postMessage = opts.postMessage || window.postMessage;
  var targetOrigin = opts.targetOrigin || '*';
  var getMessageData = opts.getMessageData || function (event) {
    return event.data;
  };
  var isCallback = opts.isCallback || false;

  var handler = function handler() {
    var data = getMessageData.apply(null, arguments);
    if (!data) return;
    if (data.sender !== 'postmsg-rpc/client' || data.func !== funcName) return;

    var msg = { sender: 'postmsg-rpc/server', id: data.id };

    var onSuccess = function onSuccess(res) {
      msg.res = res;
      postMessage(msg, targetOrigin);
    };

    var onError = function onError(err) {
      msg.err = Object.assign({ message: err.message }, err.output && err.output.payload);

      if (process.env.NODE_ENV !== 'production') {
        msg.err.stack = msg.err.stack || err.stack;
      }

      postMessage(msg, targetOrigin);
    };

    if (isCallback) {
      func.apply(null, data.args.concat(function (err, res) {
        if (err) return onError(err);
        onSuccess(res);
      }));
    } else {
      var res = func.apply(null, data.args);
      Promise.resolve(res).then(onSuccess).catch(onError);
    }
  };

  addListener('message', handler);

  return { close: function close() {
      return removeListener('message', handler);
    } };
}
//# sourceMappingURL=server.js.map