/* istanbul ignore file */
// Main exports.
export { SkynetClient } from "./client";
export { HASH_LENGTH, deriveChildSeed, genKeyPairAndSeed, genKeyPairFromSeed, PUBLIC_KEY_LENGTH, PRIVATE_KEY_LENGTH, SIGNATURE_LENGTH, } from "./crypto";
export { getSkylinkUrlForPortal } from "./download";
export { DacLibrary, MAX_ENTRY_LENGTH, MySky, MYSKY_DOMAIN, MYSKY_DEV_DOMAIN, 
// Deprecated.
mySkyDevDomain, mySkyDomain, } from "./mysky";
export { decryptJSONFile, deriveEncryptedFileKeyEntropy, deriveEncryptedFileTweak, deriveEncryptedPathSeed, encryptJSONFile, ENCRYPTED_JSON_RESPONSE_VERSION, ENCRYPTION_PATH_SEED_DIRECTORY_LENGTH, ENCRYPTION_PATH_SEED_FILE_LENGTH, 
// Deprecated.
deriveEncryptedFileSeed, } from "./mysky/encrypted_files";
export { deriveDiscoverableFileTweak } from "./mysky/tweak";
export { getEntryLink, getEntryUrlForPortal, signEntry, validateRegistryProof } from "./registry";
// Have to export `ExecuteRequestError` as a value instead of as a type or the
// consumer cannot use `instanceof`.
export { ExecuteRequestError } from "./request";
export { DELETION_ENTRY_DATA, getOrCreateSkyDBRegistryEntry } from "./skydb_v2";
export { convertSkylinkToBase32, convertSkylinkToBase64 } from "./skylink/format";
export { parseSkylink } from "./skylink/parse";
export { isSkylinkV1, isSkylinkV2 } from "./skylink/sia";
export { TUS_CHUNK_SIZE } from "./upload";
export { getRelativeFilePath, getRootDirectory } from "./utils/file";
export { MAX_REVISION } from "./utils/number";
export { stringToUint8ArrayUtf8, uint8ArrayToStringUtf8 } from "./utils/string";
export { defaultPortalUrl, DEFAULT_SKYNET_PORTAL_URL, extractDomainForPortal, getFullDomainUrlForPortal, URI_HANDSHAKE_PREFIX, URI_SKYNET_PREFIX, 
// Deprecated.
defaultSkynetPortalUrl, uriHandshakePrefix, uriSkynetPrefix, } from "./utils/url";
// Re-export Permission API.
export { Permission, PermCategory, PermType, PermRead, PermWrite, PermHidden, PermDiscoverable, PermLegacySkyID, } from "skynet-mysky-utils";
