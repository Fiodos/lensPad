{"version":3,"file":"urql.es.js","sources":["../src/context.ts","../src/hooks/state.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/useQuery.ts","../src/hooks/cache.ts","../src/hooks/useSubscription.ts","../src/components/Mutation.ts","../src/components/Query.ts","../src/components/Subscription.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { Client, createClient } from '@urql/core';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\nContext.displayName = 'UrqlContext';\n\nlet hasWarnedAboutDefault = false;\n\nexport const useClient = (): Client => {\n  const client = useContext(Context);\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    client === defaultClient &&\n    !hasWarnedAboutDefault\n  ) {\n    hasWarnedAboutDefault = true;\n\n    console.warn(\n      \"Default Client: No client has been specified using urql's Provider.\" +\n        'This means that urql will be falling back to defaults including making ' +\n        'requests to `/graphql`.\\n' +\n        \"If that's not what you want, please create a client and add a Provider.\"\n    );\n  }\n\n  return client;\n};\n","export const initialState = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n  operation: undefined,\n};\n\nconst isShallowDifferent = (a: any, b: any) => {\n  if (typeof a != 'object' || typeof b != 'object') return a !== b;\n  for (const x in a) if (!(x in b)) return true;\n  for (const x in b) if (a[x] !== b[x]) return true;\n  return false;\n};\n\ninterface Stateish {\n  data?: any;\n  error?: any;\n  fetching: boolean;\n  stale: boolean;\n}\n\nexport const computeNextState = <T extends Stateish>(\n  prevState: T,\n  result: Partial<T>\n): T => {\n  const newState = {\n    ...prevState,\n    ...result,\n    data:\n      result.data !== undefined || result.error ? result.data : prevState.data,\n    fetching: !!result.fetching,\n    stale: !!result.stale,\n  };\n\n  return isShallowDifferent(prevState, newState) ? newState : prevState;\n};\n\nexport const hasDepsChanged = <T extends { length: number }>(a: T, b: T) => {\n  for (let i = 0, l = b.length; i < l; i++) if (a[i] !== b[i]) return true;\n  return false;\n};\n","import { DocumentNode } from 'graphql';\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { pipe, toPromise } from 'wonka';\n\nimport {\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n  CombinedError,\n  createRequest,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { initialState } from './state';\n\nexport interface UseMutationState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseMutationResponse<Data = any, Variables = object> = [\n  UseMutationState<Data, Variables>,\n  (\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>\n];\n\nexport function useMutation<Data = any, Variables = object>(\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string\n): UseMutationResponse<Data, Variables> {\n  const isMounted = useRef(true);\n  const client = useClient();\n\n  const [state, setState] = useState<UseMutationState<Data, Variables>>(\n    initialState\n  );\n\n  const executeMutation = useCallback(\n    (variables?: Variables, context?: Partial<OperationContext>) => {\n      setState({ ...initialState, fetching: true });\n\n      return pipe(\n        client.executeMutation<Data, Variables>(\n          createRequest<Data, Variables>(query, variables),\n          context || {}\n        ),\n        toPromise\n      ).then(result => {\n        if (isMounted.current) {\n          setState({\n            fetching: false,\n            stale: !!result.stale,\n            data: result.data,\n            error: result.error,\n            extensions: result.extensions,\n            operation: result.operation,\n          });\n        }\n        return result;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [client, query, setState]\n  );\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [state, executeMutation];\n}\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport { TypedDocumentNode, GraphQLRequest, createRequest } from '@urql/core';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport function useRequest<Data = any, Variables = object>(\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>,\n  variables?: Variables\n): GraphQLRequest<Data, Variables> {\n  const prev = useRef<undefined | GraphQLRequest<Data, Variables>>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest<Data, Variables>(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd, onPush, takeWhile } from 'wonka';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport {\n  Client,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  OperationResult,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { getCacheForClient } from './cache';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport interface UseQueryArgs<Variables = object, Data = any> {\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  variables?: Variables;\n  requestPolicy?: RequestPolicy;\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n}\n\nexport interface UseQueryState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseQueryResponse<Data = any, Variables = object> = [\n  UseQueryState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nconst isSuspense = (client: Client, context?: Partial<OperationContext>) =>\n  client.suspense && (!context || context.suspense !== false);\n\nlet currentInit = false;\n\nexport function useQuery<Data = any, Variables = object>(\n  args: UseQueryArgs<Variables, Data>\n): UseQueryResponse<Data, Variables> {\n  const client = useClient();\n  const cache = getCacheForClient(client);\n  const suspense = isSuspense(client, args.context);\n  const request = useRequest<Data, Variables>(args.query, args.variables);\n\n  const source = useMemo(() => {\n    if (args.pause) return null;\n\n    const source = client.executeQuery(request, {\n      requestPolicy: args.requestPolicy,\n      ...args.context,\n    });\n\n    return suspense\n      ? pipe(\n          source,\n          onPush(result => {\n            cache.set(request.key, result);\n          })\n        )\n      : source;\n  }, [\n    cache,\n    client,\n    request,\n    suspense,\n    args.pause,\n    args.requestPolicy,\n    args.context,\n  ]);\n\n  const getSnapshot = useCallback(\n    (\n      source: Source<OperationResult<Data, Variables>> | null,\n      suspense: boolean\n    ): Partial<UseQueryState<Data, Variables>> => {\n      if (!source) return { fetching: false };\n\n      let result = cache.get(request.key);\n      if (!result) {\n        let resolve: (value: unknown) => void;\n\n        const subscription = pipe(\n          source,\n          takeWhile(() => (suspense && !resolve) || !result),\n          subscribe(_result => {\n            result = _result;\n            if (resolve) resolve(result);\n          })\n        );\n\n        if (result == null && suspense) {\n          const promise = new Promise(_resolve => {\n            resolve = _resolve;\n          });\n\n          cache.set(request.key, promise);\n          throw promise;\n        } else {\n          subscription.unsubscribe();\n        }\n      } else if (suspense && result != null && 'then' in result) {\n        throw result;\n      }\n\n      return (result as OperationResult<Data, Variables>) || { fetching: true };\n    },\n    [cache, request]\n  );\n\n  const deps = [\n    client,\n    request,\n    args.requestPolicy,\n    args.context,\n    args.pause,\n  ] as const;\n\n  const [state, setState] = useState(() => {\n    currentInit = true;\n    try {\n      return [\n        source,\n        computeNextState(initialState, getSnapshot(source, suspense)),\n        deps,\n      ] as const;\n    } finally {\n      currentInit = false;\n    }\n  });\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(\n        state[1],\n        getSnapshot(source, suspense)\n      )),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const source = state[0];\n    const request = state[2][1];\n\n    let hasResult = false;\n\n    const updateResult = (result: Partial<UseQueryState<Data, Variables>>) => {\n      hasResult = true;\n      if (!currentInit) {\n        setState(state => {\n          const nextResult = computeNextState(state[1], result);\n          return state[1] !== nextResult\n            ? [state[0], nextResult, state[2]]\n            : state;\n        });\n      }\n    };\n\n    if (source) {\n      const subscription = pipe(\n        source,\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      );\n\n      if (!hasResult) updateResult({ fetching: true });\n\n      return () => {\n        cache.dispose(request.key);\n        subscription.unsubscribe();\n      };\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [cache, state[0], state[2][1]]);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const context = {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      };\n\n      setState(state => {\n        const source = suspense\n          ? pipe(\n              client.executeQuery(request, context),\n              onPush(result => {\n                cache.set(request.key, result);\n              })\n            )\n          : client.executeQuery(request, context);\n        return [source, state[1], deps];\n      });\n    },\n    [\n      client,\n      cache,\n      request,\n      suspense,\n      getSnapshot,\n      args.requestPolicy,\n      args.context,\n    ]\n  );\n\n  return [currentResult, executeQuery];\n}\n","import { pipe, subscribe } from 'wonka';\nimport { Client, OperationResult } from '@urql/core';\n\ntype CacheEntry = OperationResult | Promise<unknown> | undefined;\n\ninterface Cache {\n  get(key: number): CacheEntry;\n  set(key: number, value: CacheEntry): void;\n  dispose(key: number): void;\n}\n\ninterface ClientWithCache extends Client {\n  _react?: Cache;\n}\n\nexport const getCacheForClient = (client: Client): Cache => {\n  if (!(client as ClientWithCache)._react) {\n    const reclaim = new Set();\n    const map = new Map<number, CacheEntry>();\n\n    if (client.operations$ /* not available in mocks */) {\n      pipe(\n        client.operations$,\n        subscribe(operation => {\n          if (operation.kind === 'teardown' && reclaim.has(operation.key)) {\n            reclaim.delete(operation.key);\n            map.delete(operation.key);\n          }\n        })\n      );\n    }\n\n    (client as ClientWithCache)._react = {\n      get(key) {\n        return map.get(key);\n      },\n      set(key, value) {\n        reclaim.delete(key);\n        map.set(key, value);\n      },\n      dispose(key) {\n        reclaim.add(key);\n      },\n    };\n  }\n\n  return (client as ClientWithCache)._react!;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { pipe, subscribe, onEnd } from 'wonka';\nimport { useEffect, useState, useCallback, useMemo, useRef } from 'react';\n\nimport {\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport interface UseSubscriptionArgs<Variables = object, Data = any> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  variables?: Variables;\n  pause?: boolean;\n  context?: Partial<OperationContext>;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseSubscriptionResponse<Data = any, Variables = object> = [\n  UseSubscriptionState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport function useSubscription<Data = any, Result = Data, Variables = object>(\n  args: UseSubscriptionArgs<Variables, Data>,\n  handler?: SubscriptionHandler<Data, Result>\n): UseSubscriptionResponse<Result, Variables> {\n  const client = useClient();\n  const request = useRequest<Data, Variables>(args.query, args.variables);\n\n  const handlerRef = useRef<SubscriptionHandler<Data, Result> | undefined>(\n    handler\n  );\n  handlerRef.current = handler;\n\n  const source = useMemo(\n    () =>\n      !args.pause ? client.executeSubscription(request, args.context) : null,\n    [client, request, args.pause, args.context]\n  );\n\n  const deps = [client, request, args.context, args.pause] as const;\n\n  const [state, setState] = useState(\n    () => [source, { ...initialState, fetching: !!source }, deps] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(state[1], { fetching: !!source })),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const updateResult = (\n      result: Partial<UseSubscriptionState<Data, Variables>>\n    ) => {\n      setState(state => {\n        const nextResult = computeNextState(state[1], result);\n        if (state[1] === nextResult) return state;\n        if (handlerRef.current && state[1].data !== nextResult.data) {\n          nextResult.data = handlerRef.current(\n            state[1].data,\n            nextResult.data!\n          ) as any;\n        }\n\n        return [state[0], nextResult as any, state[2]];\n      });\n    };\n\n    if (state[0]) {\n      return pipe(\n        state[0],\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      ).unsubscribe;\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [state[0]]);\n\n  // This is the imperative execute function passed to the user\n  const executeSubscription = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const source = client.executeSubscription(request, {\n        ...args.context,\n        ...opts,\n      });\n\n      setState(state => [source, state[1], deps]);\n    },\n    [client, args.context, request]\n  );\n\n  return [currentResult, executeSubscription];\n}\n","import { DocumentNode } from 'graphql';\nimport { ReactElement } from 'react';\nimport {\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n} from '@urql/core';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<Data = any, Variables = object> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  children: (arg: MutationState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface MutationState<Data = any, Variables = object>\n  extends UseMutationState<Data, Variables> {\n  executeMutation: (\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>;\n}\n\nexport function Mutation<Data = any, Variables = any>(\n  props: MutationProps<Data, Variables>\n): ReactElement<any> {\n  const mutation = useMutation<Data, Variables>(props.query);\n  return props.children({ ...mutation[0], executeMutation: mutation[1] });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '@urql/core';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport interface QueryProps<Data = any, Variables = object>\n  extends UseQueryArgs<Variables, Data> {\n  children: (arg: QueryState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface QueryState<Data = any, Variables = object>\n  extends UseQueryState<Data, Variables> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<Data = any, Variables = any>(\n  props: QueryProps<Data, Variables>\n): ReactElement<any> {\n  const query = useQuery<Data, Variables>(props);\n  return props.children({ ...query[0], executeQuery: query[1] });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '@urql/core';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport interface SubscriptionProps<\n  Data = any,\n  Result = Data,\n  Variables = object\n> extends UseSubscriptionArgs<Variables, Data> {\n  handler?: SubscriptionHandler<Data, Result>;\n  children: (arg: SubscriptionState<Result, Variables>) => ReactElement<any>;\n}\n\nexport interface SubscriptionState<Data = any, Variables = object>\n  extends UseSubscriptionState<Data, Variables> {\n  executeSubscription: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Subscription<Data = any, Result = Data, Variables = object>(\n  props: SubscriptionProps<Data, Result, Variables>\n): ReactElement<any> {\n  const subscription = useSubscription<Data, Result, Variables>(\n    props,\n    props.handler\n  );\n\n  return props.children({\n    ...subscription[0],\n    executeSubscription: subscription[1],\n  });\n}\n"],"names":["defaultClient","createClient","url","createContext","const","Context","Consumer","Provider","displayName","let","hasWarnedAboutDefault","useClient","process","fetching","stale","undefined","error","data","extensions","computeNextState","prevState","newState","result","isShallowDifferent","b","hasDepsChanged","a","i","l","length","useMutation","query","isMounted","useRef","client","setState","current","state","executeMutation","useRequest","variables","prev","key","request","currentInit","cache","getCacheForClient","_react","reclaim","Set","map","Map","operations$","operation","kind","has","delete","get","set","value","dispose","add","isSuspense","context","suspense","args","source","useMemo","pause","getSnapshot","useCallback","promise","subscription","unsubscribe","deps","initialState","ref","currentResult","nextResult","updateResult","subscribe","onEnd","executeQuery","opts","requestPolicy","handlerRef","handler","useState","_extends","executeSubscription","props","children","mutation","Query","useQuery"],"mappings":"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"}