{"version":3,"file":"urql.min.js","sources":["../src/context.ts","../src/hooks/state.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/cache.ts","../src/hooks/useQuery.ts","../src/hooks/useSubscription.ts","../src/components/Mutation.ts","../src/components/Query.ts","../src/components/Subscription.ts"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { Client, createClient } from '@urql/core';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\nContext.displayName = 'UrqlContext';\n\nlet hasWarnedAboutDefault = false;\n\nexport const useClient = (): Client => {\n  const client = useContext(Context);\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    client === defaultClient &&\n    !hasWarnedAboutDefault\n  ) {\n    hasWarnedAboutDefault = true;\n\n    console.warn(\n      \"Default Client: No client has been specified using urql's Provider.\" +\n        'This means that urql will be falling back to defaults including making ' +\n        'requests to `/graphql`.\\n' +\n        \"If that's not what you want, please create a client and add a Provider.\"\n    );\n  }\n\n  return client;\n};\n","export const initialState = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n  operation: undefined,\n};\n\nconst isShallowDifferent = (a: any, b: any) => {\n  if (typeof a != 'object' || typeof b != 'object') return a !== b;\n  for (const x in a) if (!(x in b)) return true;\n  for (const x in b) if (a[x] !== b[x]) return true;\n  return false;\n};\n\ninterface Stateish {\n  data?: any;\n  error?: any;\n  fetching: boolean;\n  stale: boolean;\n}\n\nexport const computeNextState = <T extends Stateish>(\n  prevState: T,\n  result: Partial<T>\n): T => {\n  const newState = {\n    ...prevState,\n    ...result,\n    data:\n      result.data !== undefined || result.error ? result.data : prevState.data,\n    fetching: !!result.fetching,\n    stale: !!result.stale,\n  };\n\n  return isShallowDifferent(prevState, newState) ? newState : prevState;\n};\n\nexport const hasDepsChanged = <T extends { length: number }>(a: T, b: T) => {\n  for (let i = 0, l = b.length; i < l; i++) if (a[i] !== b[i]) return true;\n  return false;\n};\n","import { DocumentNode } from 'graphql';\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { pipe, toPromise } from 'wonka';\n\nimport {\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n  CombinedError,\n  createRequest,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { initialState } from './state';\n\nexport interface UseMutationState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseMutationResponse<Data = any, Variables = object> = [\n  UseMutationState<Data, Variables>,\n  (\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>\n];\n\nexport function useMutation<Data = any, Variables = object>(\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string\n): UseMutationResponse<Data, Variables> {\n  const isMounted = useRef(true);\n  const client = useClient();\n\n  const [state, setState] = useState<UseMutationState<Data, Variables>>(\n    initialState\n  );\n\n  const executeMutation = useCallback(\n    (variables?: Variables, context?: Partial<OperationContext>) => {\n      setState({ ...initialState, fetching: true });\n\n      return pipe(\n        client.executeMutation<Data, Variables>(\n          createRequest<Data, Variables>(query, variables),\n          context || {}\n        ),\n        toPromise\n      ).then(result => {\n        if (isMounted.current) {\n          setState({\n            fetching: false,\n            stale: !!result.stale,\n            data: result.data,\n            error: result.error,\n            extensions: result.extensions,\n            operation: result.operation,\n          });\n        }\n        return result;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [client, query, setState]\n  );\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [state, executeMutation];\n}\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport { TypedDocumentNode, GraphQLRequest, createRequest } from '@urql/core';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport function useRequest<Data = any, Variables = object>(\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>,\n  variables?: Variables\n): GraphQLRequest<Data, Variables> {\n  const prev = useRef<undefined | GraphQLRequest<Data, Variables>>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest<Data, Variables>(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n}\n","import { pipe, subscribe } from 'wonka';\nimport { Client, OperationResult } from '@urql/core';\n\ntype CacheEntry = OperationResult | Promise<unknown> | undefined;\n\ninterface Cache {\n  get(key: number): CacheEntry;\n  set(key: number, value: CacheEntry): void;\n  dispose(key: number): void;\n}\n\ninterface ClientWithCache extends Client {\n  _react?: Cache;\n}\n\nexport const getCacheForClient = (client: Client): Cache => {\n  if (!(client as ClientWithCache)._react) {\n    const reclaim = new Set();\n    const map = new Map<number, CacheEntry>();\n\n    if (client.operations$ /* not available in mocks */) {\n      pipe(\n        client.operations$,\n        subscribe(operation => {\n          if (operation.kind === 'teardown' && reclaim.has(operation.key)) {\n            reclaim.delete(operation.key);\n            map.delete(operation.key);\n          }\n        })\n      );\n    }\n\n    (client as ClientWithCache)._react = {\n      get(key) {\n        return map.get(key);\n      },\n      set(key, value) {\n        reclaim.delete(key);\n        map.set(key, value);\n      },\n      dispose(key) {\n        reclaim.add(key);\n      },\n    };\n  }\n\n  return (client as ClientWithCache)._react!;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd, onPush, takeWhile } from 'wonka';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport {\n  Client,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  OperationResult,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { getCacheForClient } from './cache';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport interface UseQueryArgs<Variables = object, Data = any> {\n  query: string | DocumentNode | TypedDocumentNode<Data, Variables>;\n  variables?: Variables;\n  requestPolicy?: RequestPolicy;\n  context?: Partial<OperationContext>;\n  pause?: boolean;\n}\n\nexport interface UseQueryState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseQueryResponse<Data = any, Variables = object> = [\n  UseQueryState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nconst isSuspense = (client: Client, context?: Partial<OperationContext>) =>\n  client.suspense && (!context || context.suspense !== false);\n\nlet currentInit = false;\n\nexport function useQuery<Data = any, Variables = object>(\n  args: UseQueryArgs<Variables, Data>\n): UseQueryResponse<Data, Variables> {\n  const client = useClient();\n  const cache = getCacheForClient(client);\n  const suspense = isSuspense(client, args.context);\n  const request = useRequest<Data, Variables>(args.query, args.variables);\n\n  const source = useMemo(() => {\n    if (args.pause) return null;\n\n    const source = client.executeQuery(request, {\n      requestPolicy: args.requestPolicy,\n      ...args.context,\n    });\n\n    return suspense\n      ? pipe(\n          source,\n          onPush(result => {\n            cache.set(request.key, result);\n          })\n        )\n      : source;\n  }, [\n    cache,\n    client,\n    request,\n    suspense,\n    args.pause,\n    args.requestPolicy,\n    args.context,\n  ]);\n\n  const getSnapshot = useCallback(\n    (\n      source: Source<OperationResult<Data, Variables>> | null,\n      suspense: boolean\n    ): Partial<UseQueryState<Data, Variables>> => {\n      if (!source) return { fetching: false };\n\n      let result = cache.get(request.key);\n      if (!result) {\n        let resolve: (value: unknown) => void;\n\n        const subscription = pipe(\n          source,\n          takeWhile(() => (suspense && !resolve) || !result),\n          subscribe(_result => {\n            result = _result;\n            if (resolve) resolve(result);\n          })\n        );\n\n        if (result == null && suspense) {\n          const promise = new Promise(_resolve => {\n            resolve = _resolve;\n          });\n\n          cache.set(request.key, promise);\n          throw promise;\n        } else {\n          subscription.unsubscribe();\n        }\n      } else if (suspense && result != null && 'then' in result) {\n        throw result;\n      }\n\n      return (result as OperationResult<Data, Variables>) || { fetching: true };\n    },\n    [cache, request]\n  );\n\n  const deps = [\n    client,\n    request,\n    args.requestPolicy,\n    args.context,\n    args.pause,\n  ] as const;\n\n  const [state, setState] = useState(() => {\n    currentInit = true;\n    try {\n      return [\n        source,\n        computeNextState(initialState, getSnapshot(source, suspense)),\n        deps,\n      ] as const;\n    } finally {\n      currentInit = false;\n    }\n  });\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(\n        state[1],\n        getSnapshot(source, suspense)\n      )),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const source = state[0];\n    const request = state[2][1];\n\n    let hasResult = false;\n\n    const updateResult = (result: Partial<UseQueryState<Data, Variables>>) => {\n      hasResult = true;\n      if (!currentInit) {\n        setState(state => {\n          const nextResult = computeNextState(state[1], result);\n          return state[1] !== nextResult\n            ? [state[0], nextResult, state[2]]\n            : state;\n        });\n      }\n    };\n\n    if (source) {\n      const subscription = pipe(\n        source,\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      );\n\n      if (!hasResult) updateResult({ fetching: true });\n\n      return () => {\n        cache.dispose(request.key);\n        subscription.unsubscribe();\n      };\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [cache, state[0], state[2][1]]);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const context = {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      };\n\n      setState(state => {\n        const source = suspense\n          ? pipe(\n              client.executeQuery(request, context),\n              onPush(result => {\n                cache.set(request.key, result);\n              })\n            )\n          : client.executeQuery(request, context);\n        return [source, state[1], deps];\n      });\n    },\n    [\n      client,\n      cache,\n      request,\n      suspense,\n      getSnapshot,\n      args.requestPolicy,\n      args.context,\n    ]\n  );\n\n  return [currentResult, executeQuery];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { DocumentNode } from 'graphql';\nimport { pipe, subscribe, onEnd } from 'wonka';\nimport { useEffect, useState, useCallback, useMemo, useRef } from 'react';\n\nimport {\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { initialState, computeNextState, hasDepsChanged } from './state';\n\nexport interface UseSubscriptionArgs<Variables = object, Data = any> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  variables?: Variables;\n  pause?: boolean;\n  context?: Partial<OperationContext>;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<Data = any, Variables = object> {\n  fetching: boolean;\n  stale: boolean;\n  data?: Data;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n  operation?: Operation<Data, Variables>;\n}\n\nexport type UseSubscriptionResponse<Data = any, Variables = object> = [\n  UseSubscriptionState<Data, Variables>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport function useSubscription<Data = any, Result = Data, Variables = object>(\n  args: UseSubscriptionArgs<Variables, Data>,\n  handler?: SubscriptionHandler<Data, Result>\n): UseSubscriptionResponse<Result, Variables> {\n  const client = useClient();\n  const request = useRequest<Data, Variables>(args.query, args.variables);\n\n  const handlerRef = useRef<SubscriptionHandler<Data, Result> | undefined>(\n    handler\n  );\n  handlerRef.current = handler;\n\n  const source = useMemo(\n    () =>\n      !args.pause ? client.executeSubscription(request, args.context) : null,\n    [client, request, args.pause, args.context]\n  );\n\n  const deps = [client, request, args.context, args.pause] as const;\n\n  const [state, setState] = useState(\n    () => [source, { ...initialState, fetching: !!source }, deps] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(state[1], { fetching: !!source })),\n      deps,\n    ]);\n  }\n\n  useEffect(() => {\n    const updateResult = (\n      result: Partial<UseSubscriptionState<Data, Variables>>\n    ) => {\n      setState(state => {\n        const nextResult = computeNextState(state[1], result);\n        if (state[1] === nextResult) return state;\n        if (handlerRef.current && state[1].data !== nextResult.data) {\n          nextResult.data = handlerRef.current(\n            state[1].data,\n            nextResult.data!\n          ) as any;\n        }\n\n        return [state[0], nextResult as any, state[2]];\n      });\n    };\n\n    if (state[0]) {\n      return pipe(\n        state[0],\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      ).unsubscribe;\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [state[0]]);\n\n  // This is the imperative execute function passed to the user\n  const executeSubscription = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const source = client.executeSubscription(request, {\n        ...args.context,\n        ...opts,\n      });\n\n      setState(state => [source, state[1], deps]);\n    },\n    [client, args.context, request]\n  );\n\n  return [currentResult, executeSubscription];\n}\n","import { DocumentNode } from 'graphql';\nimport { ReactElement } from 'react';\nimport {\n  TypedDocumentNode,\n  OperationResult,\n  OperationContext,\n} from '@urql/core';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<Data = any, Variables = object> {\n  query: DocumentNode | TypedDocumentNode<Data, Variables> | string;\n  children: (arg: MutationState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface MutationState<Data = any, Variables = object>\n  extends UseMutationState<Data, Variables> {\n  executeMutation: (\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<Data, Variables>>;\n}\n\nexport function Mutation<Data = any, Variables = any>(\n  props: MutationProps<Data, Variables>\n): ReactElement<any> {\n  const mutation = useMutation<Data, Variables>(props.query);\n  return props.children({ ...mutation[0], executeMutation: mutation[1] });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '@urql/core';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport interface QueryProps<Data = any, Variables = object>\n  extends UseQueryArgs<Variables, Data> {\n  children: (arg: QueryState<Data, Variables>) => ReactElement<any>;\n}\n\nexport interface QueryState<Data = any, Variables = object>\n  extends UseQueryState<Data, Variables> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<Data = any, Variables = any>(\n  props: QueryProps<Data, Variables>\n): ReactElement<any> {\n  const query = useQuery<Data, Variables>(props);\n  return props.children({ ...query[0], executeQuery: query[1] });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '@urql/core';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport interface SubscriptionProps<\n  Data = any,\n  Result = Data,\n  Variables = object\n> extends UseSubscriptionArgs<Variables, Data> {\n  handler?: SubscriptionHandler<Data, Result>;\n  children: (arg: SubscriptionState<Result, Variables>) => ReactElement<any>;\n}\n\nexport interface SubscriptionState<Data = any, Variables = object>\n  extends UseSubscriptionState<Data, Variables> {\n  executeSubscription: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Subscription<Data = any, Result = Data, Variables = object>(\n  props: SubscriptionProps<Data, Result, Variables>\n): ReactElement<any> {\n  const subscription = useSubscription<Data, Result, Variables>(\n    props,\n    props.handler\n  );\n\n  return props.children({\n    ...subscription[0],\n    executeSubscription: subscription[1],\n  });\n}\n"],"names":["react","require","defaultClient","createClient","Context","core","Provider","displayName","createContext","hasWarnedAboutDefault","useClient","Consumer","fetching","apply","this","arguments","const","data","extensions","operation","isShallowDifferent","stale","computeNextState","result","b","a","x","x$1","newState","prevState","hasDepsChanged","i","client","setState","initialState","executeMutation","createRequest","query","variables","context","then","state","useRequest","useMemo","prev","request","undefined","current","key","getCacheForClient","cache","operations$","_react","reclaim","Set","kind","has","delete","map","value","args","source","executeQuery","pause","_extends","suspense","wonka","onPush","requestPolicy","resolve","_resolve","promise","subscription","unsubscribe","deps","currentInit","currentResult","ref","nextResult","hasResult","subscribe","updateResult","onEnd","dispose","set","handler","useState","let","useEffect","handlerRef","executeSubscription","opts","Mutation","props","children","Query","Subscription"],"mappings":"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"}